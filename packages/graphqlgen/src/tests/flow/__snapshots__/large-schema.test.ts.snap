// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`large schema 1`] = `
"/* @flow */
// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import type { GraphQLResolveInfo } from \\"graphql\\";
import type {
  Experience,
  ExperienceCategory,
  Location,
  Review,
  Picture,
  Home,
  Reservation,
  Neighbourhood,
  City,
  ExperiencesByCity,
  Viewer,
  User,
  Booking,
  Place,
  Amenities,
  Pricing,
  PlaceViews,
  GuestRequirements,
  Policies,
  HouseRules,
  Payment,
  PaymentAccount,
  PaypalInformation,
  CreditCardInformation,
  Notification,
  Message,
  AuthPayload,
  MutationResult
} from \\"../../fixtures/prisma/flow-types\\";
type Context = any;

type PLACE_SIZES =
  | \\"ENTIRE_HOUSE\\"
  | \\"ENTIRE_APARTMENT\\"
  | \\"ENTIRE_EARTH_HOUSE\\"
  | \\"ENTIRE_CABIN\\"
  | \\"ENTIRE_VILLA\\"
  | \\"ENTIRE_PLACE\\"
  | \\"ENTIRE_BOAT\\"
  | \\"PRIVATE_ROOM\\";
type CURRENCY = \\"CAD\\" | \\"CHF\\" | \\"EUR\\" | \\"JPY\\" | \\"USD\\" | \\"ZAR\\";
type PAYMENT_PROVIDER = \\"PAYPAL\\" | \\"CREDIT_CARD\\";
type NOTIFICATION_TYPE =
  | \\"OFFER\\"
  | \\"INSTANT_BOOK\\"
  | \\"RESPONSIVENESS\\"
  | \\"NEW_AMENITIES\\"
  | \\"HOUSE_RULES\\";

// Types for Query
export const Query_defaultResolvers = {};

export interface Query_Args_HomesInPriceRange {
  min: number;
  max: number;
}

export interface Query_Args_ExperiencesByCity {
  cities: string[];
}

export type Query_TopExperiences_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Experience[] | Promise<Experience[]>;

export type Query_TopHomes_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Home[] | Promise<Home[]>;

export type Query_HomesInPriceRange_Resolver = (
  parent: {},
  args: Query_Args_HomesInPriceRange,
  ctx: Context,
  info: GraphQLResolveInfo
) => Home[] | Promise<Home[]>;

export type Query_TopReservations_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Reservation[] | Promise<Reservation[]>;

export type Query_FeaturedDestinations_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Neighbourhood[] | Promise<Neighbourhood[]>;

export type Query_ExperiencesByCity_Resolver = (
  parent: {},
  args: Query_Args_ExperiencesByCity,
  ctx: Context,
  info: GraphQLResolveInfo
) => ExperiencesByCity[] | Promise<ExperiencesByCity[]>;

export type Query_Viewer_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Viewer | null | Promise<Viewer | null>;

export type Query_MyLocation_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Location | null | Promise<Location | null>;

export interface Query_Resolvers {
  topExperiences: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Experience[] | Promise<Experience[]>;

  topHomes: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Home[] | Promise<Home[]>;

  homesInPriceRange: (
    parent: {},
    args: Query_Args_HomesInPriceRange,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Home[] | Promise<Home[]>;

  topReservations: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Reservation[] | Promise<Reservation[]>;

  featuredDestinations: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Neighbourhood[] | Promise<Neighbourhood[]>;

  experiencesByCity: (
    parent: {},
    args: Query_Args_ExperiencesByCity,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => ExperiencesByCity[] | Promise<ExperiencesByCity[]>;

  viewer: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Viewer | null | Promise<Viewer | null>;

  myLocation: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Location | null | Promise<Location | null>;
}

// Types for Experience
export const Experience_defaultResolvers = {
  id: (parent: Experience) => parent.id,
  category: (parent: Experience) =>
    parent.category === undefined ? null : parent.category,
  title: (parent: Experience) => parent.title,
  location: (parent: Experience) => parent.location,
  pricePerPerson: (parent: Experience) => parent.pricePerPerson,
  reviews: (parent: Experience) => parent.reviews,
  preview: (parent: Experience) => parent.preview,
  popularity: (parent: Experience) => parent.popularity
};

export type Experience_Id_Resolver = (
  parent: Experience,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Experience_Category_Resolver = (
  parent: Experience,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => ExperienceCategory | null | Promise<ExperienceCategory | null>;

export type Experience_Title_Resolver = (
  parent: Experience,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Experience_Location_Resolver = (
  parent: Experience,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Location | Promise<Location>;

export type Experience_PricePerPerson_Resolver = (
  parent: Experience,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Experience_Reviews_Resolver = (
  parent: Experience,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Review[] | Promise<Review[]>;

export type Experience_Preview_Resolver = (
  parent: Experience,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Picture | Promise<Picture>;

export type Experience_Popularity_Resolver = (
  parent: Experience,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export interface Experience_Resolvers {
  id: (
    parent: Experience,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  category: (
    parent: Experience,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => ExperienceCategory | null | Promise<ExperienceCategory | null>;

  title: (
    parent: Experience,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  location: (
    parent: Experience,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Location | Promise<Location>;

  pricePerPerson: (
    parent: Experience,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  reviews: (
    parent: Experience,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Review[] | Promise<Review[]>;

  preview: (
    parent: Experience,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Picture | Promise<Picture>;

  popularity: (
    parent: Experience,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
}

// Types for ExperienceCategory
export const ExperienceCategory_defaultResolvers = {
  id: (parent: ExperienceCategory) => parent.id,
  mainColor: (parent: ExperienceCategory) => parent.mainColor,
  name: (parent: ExperienceCategory) => parent.name,
  experience: (parent: ExperienceCategory) =>
    parent.experience === undefined ? null : parent.experience
};

export type ExperienceCategory_Id_Resolver = (
  parent: ExperienceCategory,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type ExperienceCategory_MainColor_Resolver = (
  parent: ExperienceCategory,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type ExperienceCategory_Name_Resolver = (
  parent: ExperienceCategory,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type ExperienceCategory_Experience_Resolver = (
  parent: ExperienceCategory,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Experience | null | Promise<Experience | null>;

export interface ExperienceCategory_Resolvers {
  id: (
    parent: ExperienceCategory,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  mainColor: (
    parent: ExperienceCategory,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  name: (
    parent: ExperienceCategory,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  experience: (
    parent: ExperienceCategory,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Experience | null | Promise<Experience | null>;
}

// Types for Location
export const Location_defaultResolvers = {
  id: (parent: Location) => parent.id,
  lat: (parent: Location) => parent.lat,
  lng: (parent: Location) => parent.lng,
  address: (parent: Location) =>
    parent.address === undefined ? null : parent.address,
  directions: (parent: Location) =>
    parent.directions === undefined ? null : parent.directions
};

export type Location_Id_Resolver = (
  parent: Location,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Location_Lat_Resolver = (
  parent: Location,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Location_Lng_Resolver = (
  parent: Location,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Location_Address_Resolver = (
  parent: Location,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | null | Promise<string | null>;

export type Location_Directions_Resolver = (
  parent: Location,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | null | Promise<string | null>;

export interface Location_Resolvers {
  id: (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  lat: (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  lng: (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  address: (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  directions: (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;
}

// Types for Review
export const Review_defaultResolvers = {
  accuracy: (parent: Review) => parent.accuracy,
  checkIn: (parent: Review) => parent.checkIn,
  cleanliness: (parent: Review) => parent.cleanliness,
  communication: (parent: Review) => parent.communication,
  createdAt: (parent: Review) => parent.createdAt,
  id: (parent: Review) => parent.id,
  location: (parent: Review) => parent.location,
  stars: (parent: Review) => parent.stars,
  text: (parent: Review) => parent.text,
  value: (parent: Review) => parent.value
};

export type Review_Accuracy_Resolver = (
  parent: Review,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Review_CheckIn_Resolver = (
  parent: Review,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Review_Cleanliness_Resolver = (
  parent: Review,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Review_Communication_Resolver = (
  parent: Review,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Review_CreatedAt_Resolver = (
  parent: Review,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Review_Id_Resolver = (
  parent: Review,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Review_Location_Resolver = (
  parent: Review,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Review_Stars_Resolver = (
  parent: Review,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Review_Text_Resolver = (
  parent: Review,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Review_Value_Resolver = (
  parent: Review,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export interface Review_Resolvers {
  accuracy: (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  checkIn: (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  cleanliness: (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  communication: (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  createdAt: (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  id: (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  location: (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  stars: (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  text: (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  value: (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
}

// Types for Picture
export const Picture_defaultResolvers = {
  id: (parent: Picture) => parent.id,
  url: (parent: Picture) => parent.url
};

export type Picture_Id_Resolver = (
  parent: Picture,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Picture_Url_Resolver = (
  parent: Picture,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export interface Picture_Resolvers {
  id: (
    parent: Picture,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  url: (
    parent: Picture,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
}

// Types for Home
export const Home_defaultResolvers = {
  id: (parent: Home) => parent.id,
  name: (parent: Home) => (parent.name === undefined ? null : parent.name),
  description: (parent: Home) => parent.description,
  numRatings: (parent: Home) => parent.numRatings,
  avgRating: (parent: Home) =>
    parent.avgRating === undefined ? null : parent.avgRating,
  pictures: (parent: Home) => parent.pictures,
  perNight: (parent: Home) => parent.perNight
};

export interface Home_Args_Pictures {
  first: number | null;
}

export type Home_Id_Resolver = (
  parent: Home,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Home_Name_Resolver = (
  parent: Home,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | null | Promise<string | null>;

export type Home_Description_Resolver = (
  parent: Home,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Home_NumRatings_Resolver = (
  parent: Home,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Home_AvgRating_Resolver = (
  parent: Home,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | null | Promise<number | null>;

export type Home_Pictures_Resolver = (
  parent: Home,
  args: Home_Args_Pictures,
  ctx: Context,
  info: GraphQLResolveInfo
) => Picture[] | Promise<Picture[]>;

export type Home_PerNight_Resolver = (
  parent: Home,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export interface Home_Resolvers {
  id: (
    parent: Home,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  name: (
    parent: Home,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  description: (
    parent: Home,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  numRatings: (
    parent: Home,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  avgRating: (
    parent: Home,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  pictures: (
    parent: Home,
    args: Home_Args_Pictures,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Picture[] | Promise<Picture[]>;

  perNight: (
    parent: Home,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
}

// Types for Reservation
export const Reservation_defaultResolvers = {
  id: (parent: Reservation) => parent.id,
  title: (parent: Reservation) => parent.title,
  avgPricePerPerson: (parent: Reservation) => parent.avgPricePerPerson,
  pictures: (parent: Reservation) => parent.pictures,
  location: (parent: Reservation) => parent.location,
  isCurated: (parent: Reservation) => parent.isCurated,
  slug: (parent: Reservation) => parent.slug,
  popularity: (parent: Reservation) => parent.popularity
};

export type Reservation_Id_Resolver = (
  parent: Reservation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Reservation_Title_Resolver = (
  parent: Reservation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Reservation_AvgPricePerPerson_Resolver = (
  parent: Reservation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Reservation_Pictures_Resolver = (
  parent: Reservation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Picture[] | Promise<Picture[]>;

export type Reservation_Location_Resolver = (
  parent: Reservation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Location | Promise<Location>;

export type Reservation_IsCurated_Resolver = (
  parent: Reservation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Reservation_Slug_Resolver = (
  parent: Reservation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Reservation_Popularity_Resolver = (
  parent: Reservation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export interface Reservation_Resolvers {
  id: (
    parent: Reservation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  title: (
    parent: Reservation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  avgPricePerPerson: (
    parent: Reservation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  pictures: (
    parent: Reservation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Picture[] | Promise<Picture[]>;

  location: (
    parent: Reservation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Location | Promise<Location>;

  isCurated: (
    parent: Reservation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  slug: (
    parent: Reservation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  popularity: (
    parent: Reservation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
}

// Types for Neighbourhood
export const Neighbourhood_defaultResolvers = {
  id: (parent: Neighbourhood) => parent.id,
  name: (parent: Neighbourhood) => parent.name,
  slug: (parent: Neighbourhood) => parent.slug,
  homePreview: (parent: Neighbourhood) =>
    parent.homePreview === undefined ? null : parent.homePreview,
  city: (parent: Neighbourhood) => parent.city,
  featured: (parent: Neighbourhood) => parent.featured,
  popularity: (parent: Neighbourhood) => parent.popularity
};

export type Neighbourhood_Id_Resolver = (
  parent: Neighbourhood,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Neighbourhood_Name_Resolver = (
  parent: Neighbourhood,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Neighbourhood_Slug_Resolver = (
  parent: Neighbourhood,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Neighbourhood_HomePreview_Resolver = (
  parent: Neighbourhood,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Picture | null | Promise<Picture | null>;

export type Neighbourhood_City_Resolver = (
  parent: Neighbourhood,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => City | Promise<City>;

export type Neighbourhood_Featured_Resolver = (
  parent: Neighbourhood,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Neighbourhood_Popularity_Resolver = (
  parent: Neighbourhood,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export interface Neighbourhood_Resolvers {
  id: (
    parent: Neighbourhood,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  name: (
    parent: Neighbourhood,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  slug: (
    parent: Neighbourhood,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  homePreview: (
    parent: Neighbourhood,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Picture | null | Promise<Picture | null>;

  city: (
    parent: Neighbourhood,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => City | Promise<City>;

  featured: (
    parent: Neighbourhood,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  popularity: (
    parent: Neighbourhood,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
}

// Types for City
export const City_defaultResolvers = {
  id: (parent: City) => parent.id,
  name: (parent: City) => parent.name
};

export type City_Id_Resolver = (
  parent: City,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type City_Name_Resolver = (
  parent: City,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export interface City_Resolvers {
  id: (
    parent: City,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  name: (
    parent: City,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
}

// Types for ExperiencesByCity
export const ExperiencesByCity_defaultResolvers = {
  experiences: (parent: ExperiencesByCity) => parent.experiences,
  city: (parent: ExperiencesByCity) => parent.city
};

export type ExperiencesByCity_Experiences_Resolver = (
  parent: ExperiencesByCity,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Experience[] | Promise<Experience[]>;

export type ExperiencesByCity_City_Resolver = (
  parent: ExperiencesByCity,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => City | Promise<City>;

export interface ExperiencesByCity_Resolvers {
  experiences: (
    parent: ExperiencesByCity,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Experience[] | Promise<Experience[]>;

  city: (
    parent: ExperiencesByCity,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => City | Promise<City>;
}

// Types for Viewer
export const Viewer_defaultResolvers = {
  me: (parent: Viewer) => parent.me,
  bookings: (parent: Viewer) => parent.bookings
};

export type Viewer_Me_Resolver = (
  parent: Viewer,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => User | Promise<User>;

export type Viewer_Bookings_Resolver = (
  parent: Viewer,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Booking[] | Promise<Booking[]>;

export interface Viewer_Resolvers {
  me: (
    parent: Viewer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  bookings: (
    parent: Viewer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Booking[] | Promise<Booking[]>;
}

// Types for User
export const User_defaultResolvers = {
  bookings: (parent: User) => parent.bookings,
  createdAt: (parent: User) => parent.createdAt,
  email: (parent: User) => parent.email,
  firstName: (parent: User) => parent.firstName,
  hostingExperiences: (parent: User) => parent.hostingExperiences,
  id: (parent: User) => parent.id,
  isSuperHost: (parent: User) => parent.isSuperHost,
  lastName: (parent: User) => parent.lastName,
  notifications: (parent: User) => parent.notifications,
  ownedPlaces: (parent: User) => parent.ownedPlaces,
  phone: (parent: User) => parent.phone,
  profilePicture: (parent: User) =>
    parent.profilePicture === undefined ? null : parent.profilePicture,
  receivedMessages: (parent: User) => parent.receivedMessages,
  responseRate: (parent: User) =>
    parent.responseRate === undefined ? null : parent.responseRate,
  responseTime: (parent: User) =>
    parent.responseTime === undefined ? null : parent.responseTime,
  sentMessages: (parent: User) => parent.sentMessages,
  updatedAt: (parent: User) => parent.updatedAt
};

export type User_Bookings_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Booking[] | Promise<Booking[]>;

export type User_CreatedAt_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type User_Email_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type User_FirstName_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type User_HostingExperiences_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Experience[] | Promise<Experience[]>;

export type User_Id_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type User_IsSuperHost_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type User_LastName_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type User_Location_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Location | Promise<Location>;

export type User_Notifications_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Notification[] | Promise<Notification[]>;

export type User_OwnedPlaces_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Place[] | Promise<Place[]>;

export type User_PaymentAccount_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => PaymentAccount[] | Promise<PaymentAccount[]>;

export type User_Phone_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type User_ProfilePicture_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Picture | null | Promise<Picture | null>;

export type User_ReceivedMessages_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Message[] | Promise<Message[]>;

export type User_ResponseRate_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | null | Promise<number | null>;

export type User_ResponseTime_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | null | Promise<number | null>;

export type User_SentMessages_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Message[] | Promise<Message[]>;

export type User_UpdatedAt_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type User_Token_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export interface User_Resolvers {
  bookings: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Booking[] | Promise<Booking[]>;

  createdAt: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  email: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  firstName: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  hostingExperiences: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Experience[] | Promise<Experience[]>;

  id: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  isSuperHost: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  lastName: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  location: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Location | Promise<Location>;

  notifications: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Notification[] | Promise<Notification[]>;

  ownedPlaces: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Place[] | Promise<Place[]>;

  paymentAccount: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PaymentAccount[] | Promise<PaymentAccount[]>;

  phone: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  profilePicture: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Picture | null | Promise<Picture | null>;

  receivedMessages: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Message[] | Promise<Message[]>;

  responseRate: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  responseTime: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  sentMessages: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Message[] | Promise<Message[]>;

  updatedAt: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  token: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
}

// Types for Booking
export const Booking_defaultResolvers = {
  id: (parent: Booking) => parent.id,
  createdAt: (parent: Booking) => parent.createdAt,
  bookee: (parent: Booking) => parent.bookee,
  place: (parent: Booking) => parent.place,
  startDate: (parent: Booking) => parent.startDate,
  endDate: (parent: Booking) => parent.endDate,
  payment: (parent: Booking) => parent.payment
};

export type Booking_Id_Resolver = (
  parent: Booking,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Booking_CreatedAt_Resolver = (
  parent: Booking,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Booking_Bookee_Resolver = (
  parent: Booking,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => User | Promise<User>;

export type Booking_Place_Resolver = (
  parent: Booking,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Place | Promise<Place>;

export type Booking_StartDate_Resolver = (
  parent: Booking,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Booking_EndDate_Resolver = (
  parent: Booking,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Booking_Payment_Resolver = (
  parent: Booking,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Payment | Promise<Payment>;

export interface Booking_Resolvers {
  id: (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  createdAt: (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  bookee: (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  place: (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Place | Promise<Place>;

  startDate: (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  endDate: (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  payment: (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Payment | Promise<Payment>;
}

// Types for Place
export const Place_defaultResolvers = {
  id: (parent: Place) => parent.id,
  name: (parent: Place) => (parent.name === undefined ? null : parent.name),
  size: (parent: Place) => (parent.size === undefined ? null : parent.size),
  shortDescription: (parent: Place) => parent.shortDescription,
  description: (parent: Place) => parent.description,
  slug: (parent: Place) => parent.slug,
  maxGuests: (parent: Place) => parent.maxGuests,
  numBedrooms: (parent: Place) => parent.numBedrooms,
  numBeds: (parent: Place) => parent.numBeds,
  numBaths: (parent: Place) => parent.numBaths,
  reviews: (parent: Place) => parent.reviews,
  amenities: (parent: Place) => parent.amenities,
  host: (parent: Place) => parent.host,
  pricing: (parent: Place) => parent.pricing,
  location: (parent: Place) => parent.location,
  views: (parent: Place) => parent.views,
  guestRequirements: (parent: Place) =>
    parent.guestRequirements === undefined ? null : parent.guestRequirements,
  policies: (parent: Place) =>
    parent.policies === undefined ? null : parent.policies,
  houseRules: (parent: Place) =>
    parent.houseRules === undefined ? null : parent.houseRules,
  bookings: (parent: Place) => parent.bookings,
  pictures: (parent: Place) => parent.pictures,
  popularity: (parent: Place) => parent.popularity
};

export type Place_Id_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Place_Name_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | null | Promise<string | null>;

export type Place_Size_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => PLACE_SIZES | null | Promise<PLACE_SIZES | null>;

export type Place_ShortDescription_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Place_Description_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Place_Slug_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Place_MaxGuests_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Place_NumBedrooms_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Place_NumBeds_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Place_NumBaths_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Place_Reviews_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Review[] | Promise<Review[]>;

export type Place_Amenities_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Amenities | Promise<Amenities>;

export type Place_Host_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => User | Promise<User>;

export type Place_Pricing_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Pricing | Promise<Pricing>;

export type Place_Location_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Location | Promise<Location>;

export type Place_Views_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => PlaceViews | Promise<PlaceViews>;

export type Place_GuestRequirements_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => GuestRequirements | null | Promise<GuestRequirements | null>;

export type Place_Policies_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Policies | null | Promise<Policies | null>;

export type Place_HouseRules_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => HouseRules | null | Promise<HouseRules | null>;

export type Place_Bookings_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Booking[] | Promise<Booking[]>;

export type Place_Pictures_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Picture[] | Promise<Picture[]>;

export type Place_Popularity_Resolver = (
  parent: Place,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export interface Place_Resolvers {
  id: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  name: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  size: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PLACE_SIZES | null | Promise<PLACE_SIZES | null>;

  shortDescription: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  description: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  slug: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  maxGuests: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  numBedrooms: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  numBeds: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  numBaths: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  reviews: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Review[] | Promise<Review[]>;

  amenities: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Amenities | Promise<Amenities>;

  host: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  pricing: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Pricing | Promise<Pricing>;

  location: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Location | Promise<Location>;

  views: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PlaceViews | Promise<PlaceViews>;

  guestRequirements: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => GuestRequirements | null | Promise<GuestRequirements | null>;

  policies: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Policies | null | Promise<Policies | null>;

  houseRules: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => HouseRules | null | Promise<HouseRules | null>;

  bookings: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Booking[] | Promise<Booking[]>;

  pictures: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Picture[] | Promise<Picture[]>;

  popularity: (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
}

// Types for Amenities
export const Amenities_defaultResolvers = {
  airConditioning: (parent: Amenities) => parent.airConditioning,
  babyBath: (parent: Amenities) => parent.babyBath,
  babyMonitor: (parent: Amenities) => parent.babyMonitor,
  babysitterRecommendations: (parent: Amenities) =>
    parent.babysitterRecommendations,
  bathtub: (parent: Amenities) => parent.bathtub,
  breakfast: (parent: Amenities) => parent.breakfast,
  buzzerWirelessIntercom: (parent: Amenities) => parent.buzzerWirelessIntercom,
  cableTv: (parent: Amenities) => parent.cableTv,
  changingTable: (parent: Amenities) => parent.changingTable,
  childrensBooksAndToys: (parent: Amenities) => parent.childrensBooksAndToys,
  childrensDinnerware: (parent: Amenities) => parent.childrensDinnerware,
  crib: (parent: Amenities) => parent.crib,
  doorman: (parent: Amenities) => parent.doorman,
  dryer: (parent: Amenities) => parent.dryer,
  elevator: (parent: Amenities) => parent.elevator,
  essentials: (parent: Amenities) => parent.essentials,
  familyKidFriendly: (parent: Amenities) => parent.familyKidFriendly,
  freeParkingOnPremises: (parent: Amenities) => parent.freeParkingOnPremises,
  freeParkingOnStreet: (parent: Amenities) => parent.freeParkingOnStreet,
  gym: (parent: Amenities) => parent.gym,
  hairDryer: (parent: Amenities) => parent.hairDryer,
  hangers: (parent: Amenities) => parent.hangers,
  heating: (parent: Amenities) => parent.heating,
  hotTub: (parent: Amenities) => parent.hotTub,
  id: (parent: Amenities) => parent.id,
  indoorFireplace: (parent: Amenities) => parent.indoorFireplace,
  internet: (parent: Amenities) => parent.internet,
  iron: (parent: Amenities) => parent.iron,
  kitchen: (parent: Amenities) => parent.kitchen,
  laptopFriendlyWorkspace: (parent: Amenities) =>
    parent.laptopFriendlyWorkspace,
  paidParkingOffPremises: (parent: Amenities) => parent.paidParkingOffPremises,
  petsAllowed: (parent: Amenities) => parent.petsAllowed,
  pool: (parent: Amenities) => parent.pool,
  privateEntrance: (parent: Amenities) => parent.privateEntrance,
  shampoo: (parent: Amenities) => parent.shampoo,
  smokingAllowed: (parent: Amenities) => parent.smokingAllowed,
  suitableForEvents: (parent: Amenities) => parent.suitableForEvents,
  tv: (parent: Amenities) => parent.tv,
  washer: (parent: Amenities) => parent.washer,
  wheelchairAccessible: (parent: Amenities) => parent.wheelchairAccessible,
  wirelessInternet: (parent: Amenities) => parent.wirelessInternet
};

export type Amenities_AirConditioning_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_BabyBath_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_BabyMonitor_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_BabysitterRecommendations_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Bathtub_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Breakfast_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_BuzzerWirelessIntercom_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_CableTv_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_ChangingTable_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_ChildrensBooksAndToys_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_ChildrensDinnerware_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Crib_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Doorman_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Dryer_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Elevator_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Essentials_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_FamilyKidFriendly_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_FreeParkingOnPremises_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_FreeParkingOnStreet_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Gym_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_HairDryer_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Hangers_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Heating_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_HotTub_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Id_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Amenities_IndoorFireplace_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Internet_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Iron_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Kitchen_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_LaptopFriendlyWorkspace_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_PaidParkingOffPremises_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_PetsAllowed_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Pool_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_PrivateEntrance_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Shampoo_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_SmokingAllowed_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_SuitableForEvents_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Tv_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_Washer_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_WheelchairAccessible_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Amenities_WirelessInternet_Resolver = (
  parent: Amenities,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export interface Amenities_Resolvers {
  airConditioning: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  babyBath: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  babyMonitor: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  babysitterRecommendations: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  bathtub: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  breakfast: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  buzzerWirelessIntercom: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  cableTv: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  changingTable: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  childrensBooksAndToys: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  childrensDinnerware: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  crib: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  doorman: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  dryer: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  elevator: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  essentials: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  familyKidFriendly: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  freeParkingOnPremises: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  freeParkingOnStreet: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  gym: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  hairDryer: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  hangers: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  heating: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  hotTub: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  id: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  indoorFireplace: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  internet: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  iron: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  kitchen: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  laptopFriendlyWorkspace: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  paidParkingOffPremises: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  petsAllowed: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  pool: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  privateEntrance: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  shampoo: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  smokingAllowed: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  suitableForEvents: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  tv: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  washer: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  wheelchairAccessible: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  wirelessInternet: (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
}

// Types for Pricing
export const Pricing_defaultResolvers = {
  averageMonthly: (parent: Pricing) => parent.averageMonthly,
  averageWeekly: (parent: Pricing) => parent.averageWeekly,
  basePrice: (parent: Pricing) => parent.basePrice,
  cleaningFee: (parent: Pricing) =>
    parent.cleaningFee === undefined ? null : parent.cleaningFee,
  currency: (parent: Pricing) =>
    parent.currency === undefined ? null : parent.currency,
  extraGuests: (parent: Pricing) =>
    parent.extraGuests === undefined ? null : parent.extraGuests,
  id: (parent: Pricing) => parent.id,
  monthlyDiscount: (parent: Pricing) =>
    parent.monthlyDiscount === undefined ? null : parent.monthlyDiscount,
  perNight: (parent: Pricing) => parent.perNight,
  securityDeposit: (parent: Pricing) =>
    parent.securityDeposit === undefined ? null : parent.securityDeposit,
  smartPricing: (parent: Pricing) => parent.smartPricing,
  weekendPricing: (parent: Pricing) =>
    parent.weekendPricing === undefined ? null : parent.weekendPricing,
  weeklyDiscount: (parent: Pricing) =>
    parent.weeklyDiscount === undefined ? null : parent.weeklyDiscount
};

export type Pricing_AverageMonthly_Resolver = (
  parent: Pricing,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Pricing_AverageWeekly_Resolver = (
  parent: Pricing,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Pricing_BasePrice_Resolver = (
  parent: Pricing,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Pricing_CleaningFee_Resolver = (
  parent: Pricing,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | null | Promise<number | null>;

export type Pricing_Currency_Resolver = (
  parent: Pricing,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => CURRENCY | null | Promise<CURRENCY | null>;

export type Pricing_ExtraGuests_Resolver = (
  parent: Pricing,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | null | Promise<number | null>;

export type Pricing_Id_Resolver = (
  parent: Pricing,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Pricing_MonthlyDiscount_Resolver = (
  parent: Pricing,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | null | Promise<number | null>;

export type Pricing_PerNight_Resolver = (
  parent: Pricing,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Pricing_SecurityDeposit_Resolver = (
  parent: Pricing,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | null | Promise<number | null>;

export type Pricing_SmartPricing_Resolver = (
  parent: Pricing,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Pricing_WeekendPricing_Resolver = (
  parent: Pricing,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | null | Promise<number | null>;

export type Pricing_WeeklyDiscount_Resolver = (
  parent: Pricing,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | null | Promise<number | null>;

export interface Pricing_Resolvers {
  averageMonthly: (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  averageWeekly: (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  basePrice: (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  cleaningFee: (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  currency: (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CURRENCY | null | Promise<CURRENCY | null>;

  extraGuests: (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  id: (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  monthlyDiscount: (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  perNight: (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  securityDeposit: (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  smartPricing: (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  weekendPricing: (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  weeklyDiscount: (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;
}

// Types for PlaceViews
export const PlaceViews_defaultResolvers = {
  id: (parent: PlaceViews) => parent.id,
  lastWeek: (parent: PlaceViews) => parent.lastWeek
};

export type PlaceViews_Id_Resolver = (
  parent: PlaceViews,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type PlaceViews_LastWeek_Resolver = (
  parent: PlaceViews,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export interface PlaceViews_Resolvers {
  id: (
    parent: PlaceViews,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  lastWeek: (
    parent: PlaceViews,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
}

// Types for GuestRequirements
export const GuestRequirements_defaultResolvers = {
  govIssuedId: (parent: GuestRequirements) => parent.govIssuedId,
  guestTripInformation: (parent: GuestRequirements) =>
    parent.guestTripInformation,
  id: (parent: GuestRequirements) => parent.id,
  recommendationsFromOtherHosts: (parent: GuestRequirements) =>
    parent.recommendationsFromOtherHosts
};

export type GuestRequirements_GovIssuedId_Resolver = (
  parent: GuestRequirements,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type GuestRequirements_GuestTripInformation_Resolver = (
  parent: GuestRequirements,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type GuestRequirements_Id_Resolver = (
  parent: GuestRequirements,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type GuestRequirements_RecommendationsFromOtherHosts_Resolver = (
  parent: GuestRequirements,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export interface GuestRequirements_Resolvers {
  govIssuedId: (
    parent: GuestRequirements,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  guestTripInformation: (
    parent: GuestRequirements,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  id: (
    parent: GuestRequirements,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  recommendationsFromOtherHosts: (
    parent: GuestRequirements,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
}

// Types for Policies
export const Policies_defaultResolvers = {
  checkInEndTime: (parent: Policies) => parent.checkInEndTime,
  checkInStartTime: (parent: Policies) => parent.checkInStartTime,
  checkoutTime: (parent: Policies) => parent.checkoutTime,
  createdAt: (parent: Policies) => parent.createdAt,
  id: (parent: Policies) => parent.id,
  updatedAt: (parent: Policies) => parent.updatedAt
};

export type Policies_CheckInEndTime_Resolver = (
  parent: Policies,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Policies_CheckInStartTime_Resolver = (
  parent: Policies,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Policies_CheckoutTime_Resolver = (
  parent: Policies,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Policies_CreatedAt_Resolver = (
  parent: Policies,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Policies_Id_Resolver = (
  parent: Policies,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Policies_UpdatedAt_Resolver = (
  parent: Policies,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export interface Policies_Resolvers {
  checkInEndTime: (
    parent: Policies,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  checkInStartTime: (
    parent: Policies,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  checkoutTime: (
    parent: Policies,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  createdAt: (
    parent: Policies,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  id: (
    parent: Policies,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  updatedAt: (
    parent: Policies,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
}

// Types for HouseRules
export const HouseRules_defaultResolvers = {
  additionalRules: (parent: HouseRules) =>
    parent.additionalRules === undefined ? null : parent.additionalRules,
  createdAt: (parent: HouseRules) => parent.createdAt,
  id: (parent: HouseRules) => parent.id,
  partiesAndEventsAllowed: (parent: HouseRules) =>
    parent.partiesAndEventsAllowed === undefined
      ? null
      : parent.partiesAndEventsAllowed,
  petsAllowed: (parent: HouseRules) =>
    parent.petsAllowed === undefined ? null : parent.petsAllowed,
  smokingAllowed: (parent: HouseRules) =>
    parent.smokingAllowed === undefined ? null : parent.smokingAllowed,
  suitableForChildren: (parent: HouseRules) =>
    parent.suitableForChildren === undefined
      ? null
      : parent.suitableForChildren,
  suitableForInfants: (parent: HouseRules) =>
    parent.suitableForInfants === undefined ? null : parent.suitableForInfants,
  updatedAt: (parent: HouseRules) => parent.updatedAt
};

export type HouseRules_AdditionalRules_Resolver = (
  parent: HouseRules,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | null | Promise<string | null>;

export type HouseRules_CreatedAt_Resolver = (
  parent: HouseRules,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type HouseRules_Id_Resolver = (
  parent: HouseRules,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type HouseRules_PartiesAndEventsAllowed_Resolver = (
  parent: HouseRules,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | null | Promise<boolean | null>;

export type HouseRules_PetsAllowed_Resolver = (
  parent: HouseRules,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | null | Promise<boolean | null>;

export type HouseRules_SmokingAllowed_Resolver = (
  parent: HouseRules,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | null | Promise<boolean | null>;

export type HouseRules_SuitableForChildren_Resolver = (
  parent: HouseRules,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | null | Promise<boolean | null>;

export type HouseRules_SuitableForInfants_Resolver = (
  parent: HouseRules,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | null | Promise<boolean | null>;

export type HouseRules_UpdatedAt_Resolver = (
  parent: HouseRules,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export interface HouseRules_Resolvers {
  additionalRules: (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  createdAt: (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  id: (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  partiesAndEventsAllowed: (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  petsAllowed: (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  smokingAllowed: (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  suitableForChildren: (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  suitableForInfants: (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  updatedAt: (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
}

// Types for Payment
export const Payment_defaultResolvers = {
  booking: (parent: Payment) => parent.booking,
  createdAt: (parent: Payment) => parent.createdAt,
  id: (parent: Payment) => parent.id,
  paymentMethod: (parent: Payment) => parent.paymentMethod,
  serviceFee: (parent: Payment) => parent.serviceFee
};

export type Payment_Booking_Resolver = (
  parent: Payment,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Booking | Promise<Booking>;

export type Payment_CreatedAt_Resolver = (
  parent: Payment,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Payment_Id_Resolver = (
  parent: Payment,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Payment_PaymentMethod_Resolver = (
  parent: Payment,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => PaymentAccount | Promise<PaymentAccount>;

export type Payment_ServiceFee_Resolver = (
  parent: Payment,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export interface Payment_Resolvers {
  booking: (
    parent: Payment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Booking | Promise<Booking>;

  createdAt: (
    parent: Payment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  id: (
    parent: Payment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  paymentMethod: (
    parent: Payment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PaymentAccount | Promise<PaymentAccount>;

  serviceFee: (
    parent: Payment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
}

// Types for PaymentAccount
export const PaymentAccount_defaultResolvers = {
  id: (parent: PaymentAccount) => parent.id,
  createdAt: (parent: PaymentAccount) => parent.createdAt,
  type: (parent: PaymentAccount) =>
    parent.type === undefined ? null : parent.type,
  user: (parent: PaymentAccount) => parent.user,
  payments: (parent: PaymentAccount) => parent.payments,
  paypal: (parent: PaymentAccount) =>
    parent.paypal === undefined ? null : parent.paypal,
  creditcard: (parent: PaymentAccount) =>
    parent.creditcard === undefined ? null : parent.creditcard
};

export type PaymentAccount_Id_Resolver = (
  parent: PaymentAccount,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type PaymentAccount_CreatedAt_Resolver = (
  parent: PaymentAccount,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type PaymentAccount_Type_Resolver = (
  parent: PaymentAccount,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => PAYMENT_PROVIDER | null | Promise<PAYMENT_PROVIDER | null>;

export type PaymentAccount_User_Resolver = (
  parent: PaymentAccount,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => User | Promise<User>;

export type PaymentAccount_Payments_Resolver = (
  parent: PaymentAccount,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Payment[] | Promise<Payment[]>;

export type PaymentAccount_Paypal_Resolver = (
  parent: PaymentAccount,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => PaypalInformation | null | Promise<PaypalInformation | null>;

export type PaymentAccount_Creditcard_Resolver = (
  parent: PaymentAccount,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => CreditCardInformation | null | Promise<CreditCardInformation | null>;

export interface PaymentAccount_Resolvers {
  id: (
    parent: PaymentAccount,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  createdAt: (
    parent: PaymentAccount,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  type: (
    parent: PaymentAccount,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PAYMENT_PROVIDER | null | Promise<PAYMENT_PROVIDER | null>;

  user: (
    parent: PaymentAccount,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  payments: (
    parent: PaymentAccount,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Payment[] | Promise<Payment[]>;

  paypal: (
    parent: PaymentAccount,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PaypalInformation | null | Promise<PaypalInformation | null>;

  creditcard: (
    parent: PaymentAccount,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CreditCardInformation | null | Promise<CreditCardInformation | null>;
}

// Types for PaypalInformation
export const PaypalInformation_defaultResolvers = {
  createdAt: (parent: PaypalInformation) => parent.createdAt,
  email: (parent: PaypalInformation) => parent.email,
  id: (parent: PaypalInformation) => parent.id,
  paymentAccount: (parent: PaypalInformation) => parent.paymentAccount
};

export type PaypalInformation_CreatedAt_Resolver = (
  parent: PaypalInformation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type PaypalInformation_Email_Resolver = (
  parent: PaypalInformation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type PaypalInformation_Id_Resolver = (
  parent: PaypalInformation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type PaypalInformation_PaymentAccount_Resolver = (
  parent: PaypalInformation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => PaymentAccount | Promise<PaymentAccount>;

export interface PaypalInformation_Resolvers {
  createdAt: (
    parent: PaypalInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  email: (
    parent: PaypalInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  id: (
    parent: PaypalInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  paymentAccount: (
    parent: PaypalInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PaymentAccount | Promise<PaymentAccount>;
}

// Types for CreditCardInformation
export const CreditCardInformation_defaultResolvers = {
  cardNumber: (parent: CreditCardInformation) => parent.cardNumber,
  country: (parent: CreditCardInformation) => parent.country,
  createdAt: (parent: CreditCardInformation) => parent.createdAt,
  expiresOnMonth: (parent: CreditCardInformation) => parent.expiresOnMonth,
  expiresOnYear: (parent: CreditCardInformation) => parent.expiresOnYear,
  firstName: (parent: CreditCardInformation) => parent.firstName,
  id: (parent: CreditCardInformation) => parent.id,
  lastName: (parent: CreditCardInformation) => parent.lastName,
  paymentAccount: (parent: CreditCardInformation) =>
    parent.paymentAccount === undefined ? null : parent.paymentAccount,
  postalCode: (parent: CreditCardInformation) => parent.postalCode,
  securityCode: (parent: CreditCardInformation) => parent.securityCode
};

export type CreditCardInformation_CardNumber_Resolver = (
  parent: CreditCardInformation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type CreditCardInformation_Country_Resolver = (
  parent: CreditCardInformation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type CreditCardInformation_CreatedAt_Resolver = (
  parent: CreditCardInformation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type CreditCardInformation_ExpiresOnMonth_Resolver = (
  parent: CreditCardInformation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type CreditCardInformation_ExpiresOnYear_Resolver = (
  parent: CreditCardInformation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type CreditCardInformation_FirstName_Resolver = (
  parent: CreditCardInformation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type CreditCardInformation_Id_Resolver = (
  parent: CreditCardInformation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type CreditCardInformation_LastName_Resolver = (
  parent: CreditCardInformation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type CreditCardInformation_PaymentAccount_Resolver = (
  parent: CreditCardInformation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => PaymentAccount | null | Promise<PaymentAccount | null>;

export type CreditCardInformation_PostalCode_Resolver = (
  parent: CreditCardInformation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type CreditCardInformation_SecurityCode_Resolver = (
  parent: CreditCardInformation,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export interface CreditCardInformation_Resolvers {
  cardNumber: (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  country: (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  createdAt: (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  expiresOnMonth: (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  expiresOnYear: (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  firstName: (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  id: (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  lastName: (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  paymentAccount: (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PaymentAccount | null | Promise<PaymentAccount | null>;

  postalCode: (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  securityCode: (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
}

// Types for Notification
export const Notification_defaultResolvers = {
  createdAt: (parent: Notification) => parent.createdAt,
  id: (parent: Notification) => parent.id,
  link: (parent: Notification) => parent.link,
  readDate: (parent: Notification) => parent.readDate,
  type: (parent: Notification) =>
    parent.type === undefined ? null : parent.type,
  user: (parent: Notification) => parent.user
};

export type Notification_CreatedAt_Resolver = (
  parent: Notification,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Notification_Id_Resolver = (
  parent: Notification,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Notification_Link_Resolver = (
  parent: Notification,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Notification_ReadDate_Resolver = (
  parent: Notification,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Notification_Type_Resolver = (
  parent: Notification,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => NOTIFICATION_TYPE | null | Promise<NOTIFICATION_TYPE | null>;

export type Notification_User_Resolver = (
  parent: Notification,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => User | Promise<User>;

export interface Notification_Resolvers {
  createdAt: (
    parent: Notification,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  id: (
    parent: Notification,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  link: (
    parent: Notification,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  readDate: (
    parent: Notification,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  type: (
    parent: Notification,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NOTIFICATION_TYPE | null | Promise<NOTIFICATION_TYPE | null>;

  user: (
    parent: Notification,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;
}

// Types for Message
export const Message_defaultResolvers = {
  createdAt: (parent: Message) => parent.createdAt,
  deliveredAt: (parent: Message) => parent.deliveredAt,
  id: (parent: Message) => parent.id,
  readAt: (parent: Message) => parent.readAt
};

export type Message_CreatedAt_Resolver = (
  parent: Message,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Message_DeliveredAt_Resolver = (
  parent: Message,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Message_Id_Resolver = (
  parent: Message,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Message_ReadAt_Resolver = (
  parent: Message,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export interface Message_Resolvers {
  createdAt: (
    parent: Message,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  deliveredAt: (
    parent: Message,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  id: (
    parent: Message,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  readAt: (
    parent: Message,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
}

// Types for Mutation
export const Mutation_defaultResolvers = {};

export interface Mutation_Args_Signup {
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  phone: string;
}

export interface Mutation_Args_Login {
  email: string;
  password: string;
}

export interface Mutation_Args_AddPaymentMethod {
  cardNumber: string;
  expiresOnMonth: number;
  expiresOnYear: number;
  securityCode: string;
  firstName: string;
  lastName: string;
  postalCode: string;
  country: string;
}

export interface Mutation_Args_Book {
  placeId: string;
  checkIn: string;
  checkOut: string;
  numGuests: number;
}

export type Mutation_Signup_Resolver = (
  parent: {},
  args: Mutation_Args_Signup,
  ctx: Context,
  info: GraphQLResolveInfo
) => AuthPayload | Promise<AuthPayload>;

export type Mutation_Login_Resolver = (
  parent: {},
  args: Mutation_Args_Login,
  ctx: Context,
  info: GraphQLResolveInfo
) => AuthPayload | Promise<AuthPayload>;

export type Mutation_AddPaymentMethod_Resolver = (
  parent: {},
  args: Mutation_Args_AddPaymentMethod,
  ctx: Context,
  info: GraphQLResolveInfo
) => MutationResult | Promise<MutationResult>;

export type Mutation_Book_Resolver = (
  parent: {},
  args: Mutation_Args_Book,
  ctx: Context,
  info: GraphQLResolveInfo
) => MutationResult | Promise<MutationResult>;

export interface Mutation_Resolvers {
  signup: (
    parent: {},
    args: Mutation_Args_Signup,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  login: (
    parent: {},
    args: Mutation_Args_Login,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  addPaymentMethod: (
    parent: {},
    args: Mutation_Args_AddPaymentMethod,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MutationResult | Promise<MutationResult>;

  book: (
    parent: {},
    args: Mutation_Args_Book,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MutationResult | Promise<MutationResult>;
}

// Types for AuthPayload
export const AuthPayload_defaultResolvers = {
  token: (parent: AuthPayload) => parent.token,
  user: (parent: AuthPayload) => parent.user
};

export type AuthPayload_Token_Resolver = (
  parent: AuthPayload,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type AuthPayload_User_Resolver = (
  parent: AuthPayload,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => User | Promise<User>;

export interface AuthPayload_Resolvers {
  token: (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  user: (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;
}

// Types for MutationResult
export const MutationResult_defaultResolvers = {
  success: (parent: MutationResult) => parent.success
};

export type MutationResult_Success_Resolver = (
  parent: MutationResult,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export interface MutationResult_Resolvers {
  success: (
    parent: MutationResult,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
}

export interface Resolvers {
  Query: Query_Resolvers;
  Experience: Experience_Resolvers;
  ExperienceCategory: ExperienceCategory_Resolvers;
  Location: Location_Resolvers;
  Review: Review_Resolvers;
  Picture: Picture_Resolvers;
  Home: Home_Resolvers;
  Reservation: Reservation_Resolvers;
  Neighbourhood: Neighbourhood_Resolvers;
  City: City_Resolvers;
  ExperiencesByCity: ExperiencesByCity_Resolvers;
  Viewer: Viewer_Resolvers;
  User: User_Resolvers;
  Booking: Booking_Resolvers;
  Place: Place_Resolvers;
  Amenities: Amenities_Resolvers;
  Pricing: Pricing_Resolvers;
  PlaceViews: PlaceViews_Resolvers;
  GuestRequirements: GuestRequirements_Resolvers;
  Policies: Policies_Resolvers;
  HouseRules: HouseRules_Resolvers;
  Payment: Payment_Resolvers;
  PaymentAccount: PaymentAccount_Resolvers;
  PaypalInformation: PaypalInformation_Resolvers;
  CreditCardInformation: CreditCardInformation_Resolvers;
  Notification: Notification_Resolvers;
  Message: Message_Resolvers;
  Mutation: Mutation_Resolvers;
  AuthPayload: AuthPayload_Resolvers;
  MutationResult: MutationResult_Resolvers;
}
"
`;

exports[`large schema 2`] = `
Array [
  Object {
    "code": "/* @flow */
import { Experience_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Experience_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Experience: Experience_Resolvers = {
  ...Experience_defaultResolvers
};
",
    "force": false,
    "path": "Experience.js",
  },
  Object {
    "code": "/* @flow */
import { ExperienceCategory_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { ExperienceCategory_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const ExperienceCategory: ExperienceCategory_Resolvers = {
  ...ExperienceCategory_defaultResolvers
};
",
    "force": false,
    "path": "ExperienceCategory.js",
  },
  Object {
    "code": "/* @flow */
import { Location_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Location_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Location: Location_Resolvers = {
  ...Location_defaultResolvers
};
",
    "force": false,
    "path": "Location.js",
  },
  Object {
    "code": "/* @flow */
import { Review_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Review_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Review: Review_Resolvers = {
  ...Review_defaultResolvers
};
",
    "force": false,
    "path": "Review.js",
  },
  Object {
    "code": "/* @flow */
import { Picture_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Picture_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Picture: Picture_Resolvers = {
  ...Picture_defaultResolvers
};
",
    "force": false,
    "path": "Picture.js",
  },
  Object {
    "code": "/* @flow */
import { Home_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Home_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Home: Home_Resolvers = {
  ...Home_defaultResolvers
};
",
    "force": false,
    "path": "Home.js",
  },
  Object {
    "code": "/* @flow */
import { Reservation_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Reservation_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Reservation: Reservation_Resolvers = {
  ...Reservation_defaultResolvers
};
",
    "force": false,
    "path": "Reservation.js",
  },
  Object {
    "code": "/* @flow */
import { Neighbourhood_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Neighbourhood_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Neighbourhood: Neighbourhood_Resolvers = {
  ...Neighbourhood_defaultResolvers
};
",
    "force": false,
    "path": "Neighbourhood.js",
  },
  Object {
    "code": "/* @flow */
import { City_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { City_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const City: City_Resolvers = {
  ...City_defaultResolvers
};
",
    "force": false,
    "path": "City.js",
  },
  Object {
    "code": "/* @flow */
import { ExperiencesByCity_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { ExperiencesByCity_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const ExperiencesByCity: ExperiencesByCity_Resolvers = {
  ...ExperiencesByCity_defaultResolvers
};
",
    "force": false,
    "path": "ExperiencesByCity.js",
  },
  Object {
    "code": "/* @flow */
import { Viewer_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Viewer_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Viewer: Viewer_Resolvers = {
  ...Viewer_defaultResolvers
};
",
    "force": false,
    "path": "Viewer.js",
  },
  Object {
    "code": "/* @flow */
import { User_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { User_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const User: User_Resolvers = {
  ...User_defaultResolvers,

  location: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  paymentAccount: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  token: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "User.js",
  },
  Object {
    "code": "/* @flow */
import { Booking_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Booking_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Booking: Booking_Resolvers = {
  ...Booking_defaultResolvers
};
",
    "force": false,
    "path": "Booking.js",
  },
  Object {
    "code": "/* @flow */
import { Place_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Place_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Place: Place_Resolvers = {
  ...Place_defaultResolvers
};
",
    "force": false,
    "path": "Place.js",
  },
  Object {
    "code": "/* @flow */
import { Amenities_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Amenities_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Amenities: Amenities_Resolvers = {
  ...Amenities_defaultResolvers
};
",
    "force": false,
    "path": "Amenities.js",
  },
  Object {
    "code": "/* @flow */
import { Pricing_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Pricing_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Pricing: Pricing_Resolvers = {
  ...Pricing_defaultResolvers
};
",
    "force": false,
    "path": "Pricing.js",
  },
  Object {
    "code": "/* @flow */
import { PlaceViews_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { PlaceViews_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const PlaceViews: PlaceViews_Resolvers = {
  ...PlaceViews_defaultResolvers
};
",
    "force": false,
    "path": "PlaceViews.js",
  },
  Object {
    "code": "/* @flow */
import { GuestRequirements_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { GuestRequirements_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const GuestRequirements: GuestRequirements_Resolvers = {
  ...GuestRequirements_defaultResolvers
};
",
    "force": false,
    "path": "GuestRequirements.js",
  },
  Object {
    "code": "/* @flow */
import { Policies_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Policies_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Policies: Policies_Resolvers = {
  ...Policies_defaultResolvers
};
",
    "force": false,
    "path": "Policies.js",
  },
  Object {
    "code": "/* @flow */
import { HouseRules_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { HouseRules_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const HouseRules: HouseRules_Resolvers = {
  ...HouseRules_defaultResolvers
};
",
    "force": false,
    "path": "HouseRules.js",
  },
  Object {
    "code": "/* @flow */
import { Payment_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Payment_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Payment: Payment_Resolvers = {
  ...Payment_defaultResolvers
};
",
    "force": false,
    "path": "Payment.js",
  },
  Object {
    "code": "/* @flow */
import { PaymentAccount_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { PaymentAccount_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const PaymentAccount: PaymentAccount_Resolvers = {
  ...PaymentAccount_defaultResolvers
};
",
    "force": false,
    "path": "PaymentAccount.js",
  },
  Object {
    "code": "/* @flow */
import { PaypalInformation_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { PaypalInformation_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const PaypalInformation: PaypalInformation_Resolvers = {
  ...PaypalInformation_defaultResolvers
};
",
    "force": false,
    "path": "PaypalInformation.js",
  },
  Object {
    "code": "/* @flow */
import { CreditCardInformation_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { CreditCardInformation_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const CreditCardInformation: CreditCardInformation_Resolvers = {
  ...CreditCardInformation_defaultResolvers
};
",
    "force": false,
    "path": "CreditCardInformation.js",
  },
  Object {
    "code": "/* @flow */
import { Notification_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Notification_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Notification: Notification_Resolvers = {
  ...Notification_defaultResolvers
};
",
    "force": false,
    "path": "Notification.js",
  },
  Object {
    "code": "/* @flow */
import { Message_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Message_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Message: Message_Resolvers = {
  ...Message_defaultResolvers
};
",
    "force": false,
    "path": "Message.js",
  },
  Object {
    "code": "/* @flow */
import { AuthPayload_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { AuthPayload_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const AuthPayload: AuthPayload_Resolvers = {
  ...AuthPayload_defaultResolvers
};
",
    "force": false,
    "path": "AuthPayload.js",
  },
  Object {
    "code": "/* @flow */
import { MutationResult_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { MutationResult_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const MutationResult: MutationResult_Resolvers = {
  ...MutationResult_defaultResolvers
};
",
    "force": false,
    "path": "MutationResult.js",
  },
  Object {
    "code": "/* @flow */
import type { Query_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: Query_Resolvers = {
  topExperiences: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  topHomes: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  homesInPriceRange: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  topReservations: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  featuredDestinations: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  experiencesByCity: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  viewer: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  myLocation: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.js",
  },
  Object {
    "code": "/* @flow */
import type { Mutation_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Mutation: Mutation_Resolvers = {
  signup: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  login: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  addPaymentMethod: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  book: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Mutation.js",
  },
  Object {
    "code": "// @flow
// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import type { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { Experience } from \\"./Experience\\";
import { ExperienceCategory } from \\"./ExperienceCategory\\";
import { Location } from \\"./Location\\";
import { Review } from \\"./Review\\";
import { Picture } from \\"./Picture\\";
import { Home } from \\"./Home\\";
import { Reservation } from \\"./Reservation\\";
import { Neighbourhood } from \\"./Neighbourhood\\";
import { City } from \\"./City\\";
import { ExperiencesByCity } from \\"./ExperiencesByCity\\";
import { Viewer } from \\"./Viewer\\";
import { User } from \\"./User\\";
import { Booking } from \\"./Booking\\";
import { Place } from \\"./Place\\";
import { Amenities } from \\"./Amenities\\";
import { Pricing } from \\"./Pricing\\";
import { PlaceViews } from \\"./PlaceViews\\";
import { GuestRequirements } from \\"./GuestRequirements\\";
import { Policies } from \\"./Policies\\";
import { HouseRules } from \\"./HouseRules\\";
import { Payment } from \\"./Payment\\";
import { PaymentAccount } from \\"./PaymentAccount\\";
import { PaypalInformation } from \\"./PaypalInformation\\";
import { CreditCardInformation } from \\"./CreditCardInformation\\";
import { Notification } from \\"./Notification\\";
import { Message } from \\"./Message\\";
import { Mutation } from \\"./Mutation\\";
import { AuthPayload } from \\"./AuthPayload\\";
import { MutationResult } from \\"./MutationResult\\";

export const resolvers: Resolvers = {
  Query,
  Experience,
  ExperienceCategory,
  Location,
  Review,
  Picture,
  Home,
  Reservation,
  Neighbourhood,
  City,
  ExperiencesByCity,
  Viewer,
  User,
  Booking,
  Place,
  Amenities,
  Pricing,
  PlaceViews,
  GuestRequirements,
  Policies,
  HouseRules,
  Payment,
  PaymentAccount,
  PaypalInformation,
  CreditCardInformation,
  Notification,
  Message,
  Mutation,
  AuthPayload,
  MutationResult
};
",
    "force": false,
    "path": "index.js",
  },
]
`;
