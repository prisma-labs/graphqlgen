// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic enum 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import { Context } from \\"../../../fixtures/enum/types\\";
import { UserType } from \\"../../../fixtures/enum/types\\";
import { User } from \\"../../../fixtures/enum/types\\";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsCreateUser {
    name: string;
    type: UserType;
  }

  export type CreateUserResolver = (
    parent: {},
    args: ArgsCreateUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export interface Type {
    createUser: CreateUserResolver;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    name: (parent: User) => parent.name,
    type: (parent: User) => parent.type
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TypeResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserType | Promise<UserType>;

  export interface Type {
    id: IdResolver;

    name: NameResolver;

    type: TypeResolver;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
}
"
`;

exports[`basic enum 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { UserResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const User: UserResolvers.Type = {
  ...UserResolvers.defaultResolvers
};
",
    "force": false,
    "path": "User.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { QueryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: QueryResolvers.Type = {
  ...QueryResolvers.defaultResolvers,
  createUser: (parent, args) => null
};
",
    "force": false,
    "path": "Query.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { User } from \\"./User\\";

export const resolvers: Resolvers = {
  Query,
  User
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`basic input 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import { Context } from \\"../../../fixtures/input/types\\";
import { AddMemberPayload } from \\"../../../fixtures/input/types\\";

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface AddMemberData {
    email: string;
    projects: string[];
    sideProjects: string[];
    profile: ProfileData;
    phones: PhoneData[];
  }
  export interface ProfileData {
    firstName: string;
    lastName: string;
  }
  export interface PhoneData {
    number: string;
  }

  export interface ArgsAddMember {
    data: AddMemberData;
  }

  export interface ArgsAddMembers {
    data: AddMemberData[];
  }

  export type AddMemberResolver = (
    parent: {},
    args: ArgsAddMember,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AddMemberPayload | Promise<AddMemberPayload>;

  export type AddMembersResolver = (
    parent: {},
    args: ArgsAddMembers,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AddMemberPayload | Promise<AddMemberPayload>;

  export interface Type {
    addMember: AddMemberResolver;

    addMembers: AddMembersResolver;
  }
}

export namespace AddMemberPayloadResolvers {
  export const defaultResolvers = {
    newUserId: (parent: AddMemberPayload) => parent.newUserId
  };

  export type NewUserIdResolver = (
    parent: AddMemberPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ExistingUserInviteSentResolver = (
    parent: AddMemberPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export interface Type {
    newUserId: NewUserIdResolver;

    existingUserInviteSent: ExistingUserInviteSentResolver;
  }
}

export interface Resolvers {
  Mutation: MutationResolvers.Type;
  AddMemberPayload: AddMemberPayloadResolvers.Type;
}
"
`;

exports[`basic input 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { AddMemberPayloadResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const AddMemberPayload: AddMemberPayloadResolvers.Type = {
  ...AddMemberPayloadResolvers.defaultResolvers,

  existingUserInviteSent: parent => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "AddMemberPayload.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { MutationResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Mutation: MutationResolvers.Type = {
  ...MutationResolvers.defaultResolvers,
  addMember: (parent, args) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  addMembers: (parent, args) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Mutation.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Mutation } from \\"./Mutation\\";
import { AddMemberPayload } from \\"./AddMemberPayload\\";

export const resolvers: Resolvers = {
  Mutation,
  AddMemberPayload
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`basic scalar 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import { Context } from \\"../../../fixtures/scalar/types\\";
import { AddMemberPayload } from \\"../../../fixtures/scalar/types\\";

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface AddMemberData {
    email: string;
    projects: string[];
  }

  export interface ArgsAddMember {
    data: AddMemberData;
  }

  export type AddMemberResolver = (
    parent: {},
    args: ArgsAddMember,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AddMemberPayload | Promise<AddMemberPayload>;

  export interface Type {
    addMember: AddMemberResolver;
  }
}

export namespace AddMemberPayloadResolvers {
  export const defaultResolvers = {
    json: (parent: AddMemberPayload) => parent.json
  };

  export type JsonResolver = (
    parent: AddMemberPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    json: JsonResolver;
  }
}

export interface Resolvers {
  Mutation: MutationResolvers.Type;
  AddMemberPayload: AddMemberPayloadResolvers.Type;
}
"
`;

exports[`basic scalar 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { AddMemberPayloadResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const AddMemberPayload: AddMemberPayloadResolvers.Type = {
  ...AddMemberPayloadResolvers.defaultResolvers
};
",
    "force": false,
    "path": "AddMemberPayload.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { MutationResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Mutation: MutationResolvers.Type = {
  ...MutationResolvers.defaultResolvers,
  addMember: (parent, args) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Mutation.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Mutation } from \\"./Mutation\\";
import { AddMemberPayload } from \\"./AddMemberPayload\\";

export const resolvers: Resolvers = {
  Mutation,
  AddMemberPayload
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`basic schema 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import { Context } from \\"../../../fixtures/basic\\";
import { Number } from \\"../../../fixtures/basic\\";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsCustom_with_arg {
    id: number;
  }

  export interface ArgsCustom_with_custom_arg {
    id: Number;
  }

  export interface ArgsScalar_with_arg {
    id: number;
  }

  export interface ArgsScalar_with_custom_arg {
    id: Number;
  }

  export type IdResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type Custom_requiredResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;

  export type Custom_nullableResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | null | Promise<Number | null>;

  export type Custom_array_nullableResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number[] | null | Promise<Number[] | null>;

  export type Custom_array_requiredResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number[] | Promise<Number[]>;

  export type Custom_with_argResolver = (
    parent: {},
    args: ArgsCustom_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;

  export type Custom_with_custom_argResolver = (
    parent: {},
    args: ArgsCustom_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;

  export type Scalar_requiredResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type Scalar_nullableResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type Scalar_array_nullableResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean[] | null | Promise<boolean[] | null>;

  export type Scalar_array_requiredResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean[] | Promise<boolean[]>;

  export type Scalar_with_argResolver = (
    parent: {},
    args: ArgsScalar_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type Scalar_with_custom_argResolver = (
    parent: {},
    args: ArgsScalar_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type {
    id: IdResolver;

    custom_required: Custom_requiredResolver;

    custom_nullable: Custom_nullableResolver;

    custom_array_nullable: Custom_array_nullableResolver;

    custom_array_required: Custom_array_requiredResolver;

    custom_with_arg: Custom_with_argResolver;

    custom_with_custom_arg: Custom_with_custom_argResolver;

    scalar_required: Scalar_requiredResolver;

    scalar_nullable: Scalar_nullableResolver;

    scalar_array_nullable: Scalar_array_nullableResolver;

    scalar_array_required: Scalar_array_requiredResolver;

    scalar_with_arg: Scalar_with_argResolver;

    scalar_with_custom_arg: Scalar_with_custom_argResolver;
  }
}

export namespace NumberResolvers {
  export const defaultResolvers = {
    id: (parent: Number) => parent.id,
    value: (parent: Number) => parent.value
  };

  export type IdResolver = (
    parent: Number,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ValueResolver = (
    parent: Number,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    id: IdResolver;

    value: ValueResolver;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Number: NumberResolvers.Type;
}
"
`;

exports[`basic schema 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { NumberResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Number: NumberResolvers.Type = {
  ...NumberResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Number.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { QueryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: QueryResolvers.Type = {
  ...QueryResolvers.defaultResolvers,
  id: parent => null,
  custom_required: parent => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_nullable: parent => null,
  custom_array_nullable: parent => null,
  custom_array_required: parent => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_arg: (parent, args) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_custom_arg: (parent, args) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_required: parent => false,
  scalar_nullable: parent => null,
  scalar_array_nullable: parent => null,
  scalar_array_required: parent => [],
  scalar_with_arg: (parent, args) => false,
  scalar_with_custom_arg: (parent, args) => false
};
",
    "force": false,
    "path": "Query.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { Number } from \\"./Number\\";

export const resolvers: Resolvers = {
  Query,
  Number
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`basic union 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import { Context } from \\"../../../fixtures/union/types\\";
import { User } from \\"../../../fixtures/union/types\\";
import { Student } from \\"../../../fixtures/union/types\\";
import { Professor } from \\"../../../fixtures/union/types\\";

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    name: (parent: User) => parent.name
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TypeResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => {} | Promise<{}>;

  export interface Type {
    id: IdResolver;

    name: NameResolver;

    type: TypeResolver;
  }
}

export namespace StudentResolvers {
  export const defaultResolvers = {
    age: (parent: Student) => parent.age
  };

  export type AgeResolver = (
    parent: Student,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    age: AgeResolver;
  }
}

export namespace ProfessorResolvers {
  export const defaultResolvers = {
    degree: (parent: Professor) => parent.degree
  };

  export type DegreeResolver = (
    parent: Professor,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    degree: DegreeResolver;
  }
}

export interface Resolvers {
  User: UserResolvers.Type;
  Student: StudentResolvers.Type;
  Professor: ProfessorResolvers.Type;
}
"
`;

exports[`basic union 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { UserResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const User: UserResolvers.Type = {
  ...UserResolvers.defaultResolvers,

  type: parent => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "User.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { StudentResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Student: StudentResolvers.Type = {
  ...StudentResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Student.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { ProfessorResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Professor: ProfessorResolvers.Type = {
  ...ProfessorResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Professor.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { User } from \\"./User\\";
import { Student } from \\"./Student\\";
import { Professor } from \\"./Professor\\";

export const resolvers: Resolvers = {
  User,
  Student,
  Professor
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`defaultName 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import { Context } from \\"../../../fixtures/defaultName\\";
import { NumberNode } from \\"../../../fixtures/defaultName\\";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsCustom_with_arg {
    id: number;
  }

  export interface ArgsCustom_with_custom_arg {
    id: NumberNode;
  }

  export interface ArgsScalar_with_arg {
    id: number;
  }

  export interface ArgsScalar_with_custom_arg {
    id: NumberNode;
  }

  export type IdResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type Custom_requiredResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode | Promise<NumberNode>;

  export type Custom_nullableResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode | null | Promise<NumberNode | null>;

  export type Custom_array_nullableResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode[] | null | Promise<NumberNode[] | null>;

  export type Custom_array_requiredResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode[] | Promise<NumberNode[]>;

  export type Custom_with_argResolver = (
    parent: {},
    args: ArgsCustom_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode | Promise<NumberNode>;

  export type Custom_with_custom_argResolver = (
    parent: {},
    args: ArgsCustom_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode | Promise<NumberNode>;

  export type Scalar_requiredResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type Scalar_nullableResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type Scalar_array_nullableResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean[] | null | Promise<boolean[] | null>;

  export type Scalar_array_requiredResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean[] | Promise<boolean[]>;

  export type Scalar_with_argResolver = (
    parent: {},
    args: ArgsScalar_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type Scalar_with_custom_argResolver = (
    parent: {},
    args: ArgsScalar_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type {
    id: IdResolver;

    custom_required: Custom_requiredResolver;

    custom_nullable: Custom_nullableResolver;

    custom_array_nullable: Custom_array_nullableResolver;

    custom_array_required: Custom_array_requiredResolver;

    custom_with_arg: Custom_with_argResolver;

    custom_with_custom_arg: Custom_with_custom_argResolver;

    scalar_required: Scalar_requiredResolver;

    scalar_nullable: Scalar_nullableResolver;

    scalar_array_nullable: Scalar_array_nullableResolver;

    scalar_array_required: Scalar_array_requiredResolver;

    scalar_with_arg: Scalar_with_argResolver;

    scalar_with_custom_arg: Scalar_with_custom_argResolver;
  }
}

export namespace NumberResolvers {
  export const defaultResolvers = {
    id: (parent: NumberNode) => parent.id,
    value: (parent: NumberNode) => parent.value
  };

  export type IdResolver = (
    parent: NumberNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ValueResolver = (
    parent: NumberNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    id: IdResolver;

    value: ValueResolver;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Number: NumberResolvers.Type;
}
"
`;

exports[`defaultName 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { NumberResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Number: NumberResolvers.Type = {
  ...NumberResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Number.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { QueryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: QueryResolvers.Type = {
  ...QueryResolvers.defaultResolvers,
  id: parent => null,
  custom_required: parent => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_nullable: parent => null,
  custom_array_nullable: parent => null,
  custom_array_required: parent => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_arg: (parent, args) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_custom_arg: (parent, args) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_required: parent => false,
  scalar_nullable: parent => null,
  scalar_array_nullable: parent => null,
  scalar_array_required: parent => [],
  scalar_with_arg: (parent, args) => false,
  scalar_with_custom_arg: (parent, args) => false
};
",
    "force": false,
    "path": "Query.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { Number } from \\"./Number\\";

export const resolvers: Resolvers = {
  Query,
  Number
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;
