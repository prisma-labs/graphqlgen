// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic schema 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import { Context } from \\"../../../fixtures/basic\\";
import { Number } from \\"../../../fixtures/basic\\";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsCustom_with_arg {
    id: number;
  }

  export interface ArgsCustom_with_custom_arg {
    id: Number;
  }

  export interface ArgsScalar_with_arg {
    id: number;
  }

  export interface ArgsScalar_with_custom_arg {
    id: Number;
  }

  export type IdResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type Custom_requiredResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;

  export type Custom_nullableResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | null | Promise<Number | null>;

  export type Custom_array_nullableResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number[] | null | Promise<Number[] | null>;

  export type Custom_array_requiredResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number[] | Promise<Number[]>;

  export type Custom_with_argResolver = (
    parent: {},
    args: ArgsCustom_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;

  export type Custom_with_custom_argResolver = (
    parent: {},
    args: ArgsCustom_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;

  export type Scalar_requiredResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type Scalar_nullableResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type Scalar_array_nullableResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean[] | null | Promise<boolean[] | null>;

  export type Scalar_array_requiredResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean[] | Promise<boolean[]>;

  export type Scalar_with_argResolver = (
    parent: {},
    args: ArgsScalar_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type Scalar_with_custom_argResolver = (
    parent: {},
    args: ArgsScalar_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type {
    [key: string]: any;

    id: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    custom_required: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Number | Promise<Number>;

    custom_nullable: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Number | null | Promise<Number | null>;

    custom_array_nullable: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Number[] | null | Promise<Number[] | null>;

    custom_array_required: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Number[] | Promise<Number[]>;

    custom_with_arg: (
      parent: {},
      args: ArgsCustom_with_arg,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Number | Promise<Number>;

    custom_with_custom_arg: (
      parent: {},
      args: ArgsCustom_with_custom_arg,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Number | Promise<Number>;

    scalar_required: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    scalar_nullable: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    scalar_array_nullable: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean[] | null | Promise<boolean[] | null>;

    scalar_array_required: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean[] | Promise<boolean[]>;

    scalar_with_arg: (
      parent: {},
      args: ArgsScalar_with_arg,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    scalar_with_custom_arg: (
      parent: {},
      args: ArgsScalar_with_custom_arg,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
  }
}

export namespace NumberResolvers {
  export const defaultResolvers = {
    id: (parent: Number) => parent.id,
    value: (parent: Number) => parent.value
  };

  export type IdResolver = (
    parent: Number,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ValueResolver = (
    parent: Number,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    [key: string]: any;

    id: (
      parent: Number,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    value: (
      parent: Number,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export interface Resolvers {
  [key: string]: QueryResolvers.Type | NumberResolvers.Type;
  Query: QueryResolvers.Type;
  Number: NumberResolvers.Type;
}
"
`;

exports[`basic schema 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { NumberResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Number: NumberResolvers.Type = {
  ...NumberResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Number.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { QueryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: QueryResolvers.Type = {
  ...QueryResolvers.defaultResolvers,
  id: parent => null,
  custom_required: parent => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_nullable: parent => null,
  custom_array_nullable: parent => null,
  custom_array_required: parent => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_arg: (parent, args) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_custom_arg: (parent, args) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_required: parent => false,
  scalar_nullable: parent => null,
  scalar_array_nullable: parent => null,
  scalar_array_required: parent => [],
  scalar_with_arg: (parent, args) => false,
  scalar_with_custom_arg: (parent, args) => false
};
",
    "force": false,
    "path": "Query.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { Number } from \\"./Number\\";

export const resolvers: Resolvers = {
  Query,
  Number
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;
