// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Advance scaffolding 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import { Context } from \\"../models/context\\";
import { Schema1 } from \\"../models/definitions\\";
import { Schema2 } from \\"../models/definitions\\";
import { Schema3 } from \\"../models/definitions\\";

export namespace Schema1Resolvers {
  export const defaultResolvers = {
    schema1: (parent: Schema1) => parent.schema1
  };

  export type Schema1Resolver = (
    parent: Schema1,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    schema1: (
      parent: Schema1,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace Schema2Resolvers {
  export const defaultResolvers = {
    schema2: (parent: Schema2) => parent.schema2
  };

  export type Schema2Resolver = (
    parent: Schema2,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    schema2: (
      parent: Schema2,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace Schema3Resolvers {
  export const defaultResolvers = {
    schema3: (parent: Schema3) => parent.schema3
  };

  export type Schema3Resolver = (
    parent: Schema3,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    schema3: (
      parent: Schema3,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export interface Resolvers {
  Schema1: Schema1Resolvers.Type;
  Schema2: Schema2Resolvers.Type;
  Schema3: Schema3Resolvers.Type;
}
"
`;

exports[`Advance scaffolding 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Schema1Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Schema1: Schema1Resolvers.Type = {
  ...Schema1Resolvers.defaultResolvers
};
",
    "force": false,
    "path": "Schema1.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Schema2Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Schema2: Schema2Resolvers.Type = {
  ...Schema2Resolvers.defaultResolvers
};
",
    "force": false,
    "path": "Schema2.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Schema3Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Schema3: Schema3Resolvers.Type = {
  ...Schema3Resolvers.defaultResolvers
};
",
    "force": false,
    "path": "Schema3.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Schema1 } from \\"./Schema1\\";
import { Schema2 } from \\"./Schema2\\";
import { Schema3 } from \\"./Schema3\\";

export const resolvers: Resolvers = {
  Schema1,
  Schema2,
  Schema3
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`Check Models 1`] = `
Array [
  "./src/tests/fixtures/advanced-scaffold/models/context.ts",
  "./src/tests/fixtures/advanced-scaffold/models/definitions.ts",
]
`;

exports[`Check Schemas 1`] = `
Array [
  "./src/tests/fixtures/advanced-scaffold/schemas/schema-1.graphql",
  "./src/tests/fixtures/advanced-scaffold/schemas/schema-2.graphql",
  "./src/tests/fixtures/advanced-scaffold/schemas/schema-3.graphql",
]
`;

exports[`Read Schema 1`] = `
"type Schema1 {
  schema1: String!
}

type Schema2 {
  schema2: String!
}

type Schema3 {
  schema3: String!
}
"
`;

exports[`create config 1`] = `
Object {
  "context": "./src/tests/fixtures/advanced-scaffold/models/context.ts:Context",
  "language": "typescript",
  "models": Object {
    "files": Array [
      "./src/tests/fixtures/advanced-scaffold/models/**.ts",
    ],
  },
  "output": "./src/tests/fixtures/advanced-scaffold/__generated__/graphqlgen.ts",
  "resolver-scaffolding": Object {
    "layout": "file-per-type",
    "output": "./src/tests/fixtures/advanced-scaffold/__generated__/tmp-resolvers",
  },
  "schema": "./src/tests/fixtures/advanced-scaffold/schemas/**.graphql",
  "schema-output": "./src/tests/fixtures/advanced-scaffold/__generated__/graphqlgen.schema.graphql",
}
`;
