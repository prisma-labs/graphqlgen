// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic enum 1`] = `
"/* @flow */
// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import type { GraphQLResolveInfo } from \\"graphql\\";
import type { User } from \\"../../fixtures/enum/types-flow\\";
type Context = any;

export type EnumAnnotation = \\"EDITOR\\" | \\"COLLABORATOR\\";
export type EnumAsUnionType = \\"RED\\" | \\"GREEN\\" | \\"BLUE\\";

// Types for Query
export const Query_defaultResolvers = {};

export interface Query_Args_CreateUser {
  name: string;
  type: EnumAnnotation;
}

export type Query_CreateUser_Resolver = (
  parent: {},
  args: Query_Args_CreateUser,
  ctx: Context,
  info: GraphQLResolveInfo
) => User | null | Promise<User | null>;

export interface Query_Resolvers {
  createUser: (
    parent: {},
    args: Query_Args_CreateUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;
}

// Types for User
export const User_defaultResolvers = {
  id: (parent: User) => parent.id,
  name: (parent: User) => parent.name,
  enumAsUnionType: (parent: User) => parent.enumAsUnionType
};

export type User_Id_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type User_Name_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type User_EnumAnnotation_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => EnumAnnotation | Promise<EnumAnnotation>;

export type User_EnumAsUnionType_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => EnumAsUnionType | Promise<EnumAsUnionType>;

export interface User_Resolvers {
  id: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  name: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  enumAnnotation: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => EnumAnnotation | Promise<EnumAnnotation>;

  enumAsUnionType: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => EnumAsUnionType | Promise<EnumAsUnionType>;
}

export interface Resolvers {
  Query: Query_Resolvers;
  User: User_Resolvers;
}
"
`;

exports[`basic enum 2`] = `
Array [
  Object {
    "code": "/* @flow */
import { User_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { User_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const User: User_Resolvers = {
  ...User_defaultResolvers,

  enumAnnotation: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "User.js",
  },
  Object {
    "code": "/* @flow */
import type { Query_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: Query_Resolvers = {
  createUser: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.js",
  },
  Object {
    "code": "// @flow
// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import type { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { User } from \\"./User\\";

export const resolvers: Resolvers = {
  Query,
  User
};
",
    "force": false,
    "path": "index.js",
  },
]
`;

exports[`basic scalar 1`] = `
"/* @flow */
// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import type { GraphQLResolveInfo } from \\"graphql\\";
import type { AddMemberPayload } from \\"../../fixtures/scalar/flow-types\\";
type Context = any;

// Types for Mutation
export const Mutation_defaultResolvers = {};

export interface Mutation_AddMemberData {
  email: string;
  projects: string[];
}

export interface Mutation_Args_AddMember {
  data: Mutation_AddMemberData;
}

export type Mutation_AddMember_Resolver = (
  parent: {},
  args: Mutation_Args_AddMember,
  ctx: Context,
  info: GraphQLResolveInfo
) => AddMemberPayload | Promise<AddMemberPayload>;

export interface Mutation_Resolvers {
  addMember: (
    parent: {},
    args: Mutation_Args_AddMember,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AddMemberPayload | Promise<AddMemberPayload>;
}

// Types for AddMemberPayload
export const AddMemberPayload_defaultResolvers = {
  json: (parent: AddMemberPayload) => parent.json
};

export type AddMemberPayload_Json_Resolver = (
  parent: AddMemberPayload,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | null | Promise<string | null>;

export interface AddMemberPayload_Resolvers {
  json: (
    parent: AddMemberPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;
}

export interface Resolvers {
  Mutation: Mutation_Resolvers;
  AddMemberPayload: AddMemberPayload_Resolvers;
}
"
`;

exports[`basic scalar 2`] = `
Array [
  Object {
    "code": "/* @flow */
import { AddMemberPayload_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { AddMemberPayload_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const AddMemberPayload: AddMemberPayload_Resolvers = {
  ...AddMemberPayload_defaultResolvers
};
",
    "force": false,
    "path": "AddMemberPayload.js",
  },
  Object {
    "code": "/* @flow */
import type { Mutation_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Mutation: Mutation_Resolvers = {
  addMember: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Mutation.js",
  },
  Object {
    "code": "// @flow
// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import type { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Mutation } from \\"./Mutation\\";
import { AddMemberPayload } from \\"./AddMemberPayload\\";

export const resolvers: Resolvers = {
  Mutation,
  AddMemberPayload
};
",
    "force": false,
    "path": "index.js",
  },
]
`;

exports[`basic schema 1`] = `
"/* @flow */
// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import type { GraphQLResolveInfo } from \\"graphql\\";
import type { Number } from \\"../../fixtures/basic/types-flow\\";
type Context = any;

// Types for Query
export const Query_defaultResolvers = {};

export interface Query_Args_Custom_with_arg {
  id: number;
}

export interface Query_Args_Custom_with_custom_arg {
  id: Number;
}

export interface Query_Args_Scalar_with_arg {
  id: number;
}

export interface Query_Args_Scalar_with_custom_arg {
  id: Number;
}

export type Query_Id_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Query_Custom_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Number | Promise<Number>;

export type Query_Custom_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Number | null | Promise<Number | null>;

export type Query_Custom_array_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Array<Number | null> | null | Promise<Array<Number | null> | null>;

export type Query_Custom_array_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Array<Number | null> | Promise<Array<Number | null>>;

export type Query_Custom_with_arg_Resolver = (
  parent: {},
  args: Query_Args_Custom_with_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => Number | Promise<Number>;

export type Query_Custom_with_custom_arg_Resolver = (
  parent: {},
  args: Query_Args_Custom_with_custom_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => Number | Promise<Number>;

export type Query_Scalar_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Query_Scalar_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | null | Promise<boolean | null>;

export type Query_Scalar_array_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Array<boolean | null> | null | Promise<Array<boolean | null> | null>;

export type Query_Scalar_array_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Array<boolean | null> | Promise<Array<boolean | null>>;

export type Query_Scalar_with_arg_Resolver = (
  parent: {},
  args: Query_Args_Scalar_with_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Query_Scalar_with_custom_arg_Resolver = (
  parent: {},
  args: Query_Args_Scalar_with_custom_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export interface Query_Resolvers {
  id: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  custom_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;

  custom_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | null | Promise<Number | null>;

  custom_array_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Number | null> | null | Promise<Array<Number | null> | null>;

  custom_array_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Number | null> | Promise<Array<Number | null>>;

  custom_with_arg: (
    parent: {},
    args: Query_Args_Custom_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;

  custom_with_custom_arg: (
    parent: {},
    args: Query_Args_Custom_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;

  scalar_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  scalar_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  scalar_array_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<boolean | null> | null | Promise<Array<boolean | null> | null>;

  scalar_array_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<boolean | null> | Promise<Array<boolean | null>>;

  scalar_with_arg: (
    parent: {},
    args: Query_Args_Scalar_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  scalar_with_custom_arg: (
    parent: {},
    args: Query_Args_Scalar_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
}

// Types for Number
export const Number_defaultResolvers = {
  id: (parent: Number) => parent.id,
  value: (parent: Number) => parent.value
};

export type Number_Id_Resolver = (
  parent: Number,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | null | Promise<string | null>;

export type Number_Value_Resolver = (
  parent: Number,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | null | Promise<number | null>;

export interface Number_Resolvers {
  id: (
    parent: Number,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  value: (
    parent: Number,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;
}

export interface Resolvers {
  Query: Query_Resolvers;
  Number: Number_Resolvers;
}
"
`;

exports[`basic schema 2`] = `
Array [
  Object {
    "code": "/* @flow */
import { Number_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Number_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Number: Number_Resolvers = {
  ...Number_defaultResolvers
};
",
    "force": false,
    "path": "Number.js",
  },
  Object {
    "code": "/* @flow */
import type { Query_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: Query_Resolvers = {
  id: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_required: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_nullable: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_nullable: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_required: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_arg: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_custom_arg: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_required: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_nullable: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_nullable: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_required: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_arg: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_custom_arg: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.js",
  },
  Object {
    "code": "// @flow
// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import type { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { Number } from \\"./Number\\";

export const resolvers: Resolvers = {
  Query,
  Number
};
",
    "force": false,
    "path": "index.js",
  },
]
`;

exports[`basic union 1`] = `
"/* @flow */
// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import type { GraphQLResolveInfo } from \\"graphql\\";
import type { Student, Professor, User } from \\"../../fixtures/union/flow-types\\";
type Context = any;

// Types for Query
export const Query_defaultResolvers = {};

export interface Query_Args_Users {
  first?: number | null;
}

export type Query_Users_Resolver = (
  parent: {},
  args: Query_Args_Users,
  ctx: Context,
  info: GraphQLResolveInfo
) => Array<Student | Professor> | Promise<Array<Student | Professor>>;

export interface Query_Resolvers {
  users: (
    parent: {},
    args: Query_Args_Users,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Student | Professor> | Promise<Array<Student | Professor>>;
}

// Types for Student
export const Student_defaultResolvers = {
  age: (parent: Student) => parent.age
};

export type Student_Age_Resolver = (
  parent: Student,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export interface Student_Resolvers {
  age: (
    parent: Student,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
}

// Types for Professor
export const Professor_defaultResolvers = {
  degree: (parent: Professor) => parent.degree
};

export type Professor_Degree_Resolver = (
  parent: Professor,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | null | Promise<string | null>;

export interface Professor_Resolvers {
  degree: (
    parent: Professor,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;
}

// Types for User
export const User_defaultResolvers = {
  id: (parent: User) => parent.id,
  name: (parent: User) => parent.name
};

export type User_Id_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type User_Name_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export interface User_Resolvers {
  id: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  name: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
}

export interface UserType_Resolvers {
  __resolveType?: (
    value: Student | Professor,
    context: Context,
    info: GraphQLResolveInfo
  ) => \\"Student\\" | \\"Professor\\" | Promise<\\"Student\\" | \\"Professor\\">;
}

export interface Resolvers {
  Query: Query_Resolvers;
  Student: Student_Resolvers;
  Professor: Professor_Resolvers;
  User: User_Resolvers;
  UserType?: UserType_Resolvers;
}
"
`;

exports[`basic union 2`] = `
Array [
  Object {
    "code": "/* @flow */
import { Student_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Student_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Student: Student_Resolvers = {
  ...Student_defaultResolvers
};
",
    "force": false,
    "path": "Student.js",
  },
  Object {
    "code": "/* @flow */
import { Professor_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Professor_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Professor: Professor_Resolvers = {
  ...Professor_defaultResolvers
};
",
    "force": false,
    "path": "Professor.js",
  },
  Object {
    "code": "/* @flow */
import { User_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { User_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const User: User_Resolvers = {
  ...User_defaultResolvers
};
",
    "force": false,
    "path": "User.js",
  },
  Object {
    "code": "// @flow
// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { UserType_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const UserType: UserType_Resolvers = {
  __resolveType: (parent, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "UserType.ts",
  },
  Object {
    "code": "/* @flow */
import type { Query_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: Query_Resolvers = {
  users: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.js",
  },
  Object {
    "code": "// @flow
// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import type { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { Student } from \\"./Student\\";
import { Professor } from \\"./Professor\\";
import { User } from \\"./User\\";

export const resolvers: Resolvers = {
  Query,
  Student,
  Professor,
  User
};
",
    "force": false,
    "path": "index.js",
  },
]
`;

exports[`context 1`] = `
"/* @flow */
// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import type { GraphQLResolveInfo } from \\"graphql\\";
import type { User } from \\"../../fixtures/context/flow-types\\";
import type { Context } from \\"../../fixtures/context/flow-types\\";

// Types for Query
export const Query_defaultResolvers = {};

export type Query_CreateUser_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => User | null | Promise<User | null>;

export interface Query_Resolvers {
  createUser: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;
}

// Types for User
export const User_defaultResolvers = {
  id: (parent: User) => parent.id
};

export type User_Id_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export interface User_Resolvers {
  id: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
}

export interface Resolvers {
  Query: Query_Resolvers;
  User: User_Resolvers;
}
"
`;

exports[`context 2`] = `
Array [
  Object {
    "code": "/* @flow */
import { User_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { User_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const User: User_Resolvers = {
  ...User_defaultResolvers
};
",
    "force": false,
    "path": "User.js",
  },
  Object {
    "code": "/* @flow */
import type { Query_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: Query_Resolvers = {
  createUser: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.js",
  },
  Object {
    "code": "// @flow
// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import type { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { User } from \\"./User\\";

export const resolvers: Resolvers = {
  Query,
  User
};
",
    "force": false,
    "path": "index.js",
  },
]
`;

exports[`defaultName 1`] = `
"/* @flow */
// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import type { GraphQLResolveInfo } from \\"graphql\\";
import type { NumberNode } from \\"../../fixtures/defaultName/flow-types\\";
type Context = any;

// Types for Query
export const Query_defaultResolvers = {};

export interface Query_Args_Custom_with_arg {
  id: number;
}

export interface Query_Args_Custom_with_custom_arg {
  id: NumberNode;
}

export interface Query_Args_Scalar_with_arg {
  id: number;
}

export interface Query_Args_Scalar_with_custom_arg {
  id: NumberNode;
}

export type Query_Id_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Query_Custom_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => NumberNode | Promise<NumberNode>;

export type Query_Custom_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => NumberNode | null | Promise<NumberNode | null>;

export type Query_Custom_array_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Array<NumberNode | null> | null | Promise<Array<NumberNode | null> | null>;

export type Query_Custom_array_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Array<NumberNode | null> | Promise<Array<NumberNode | null>>;

export type Query_Custom_with_arg_Resolver = (
  parent: {},
  args: Query_Args_Custom_with_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => NumberNode | Promise<NumberNode>;

export type Query_Custom_with_custom_arg_Resolver = (
  parent: {},
  args: Query_Args_Custom_with_custom_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => NumberNode | Promise<NumberNode>;

export type Query_Scalar_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Query_Scalar_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | null | Promise<boolean | null>;

export type Query_Scalar_array_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Array<boolean | null> | null | Promise<Array<boolean | null> | null>;

export type Query_Scalar_array_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Array<boolean | null> | Promise<Array<boolean | null>>;

export type Query_Scalar_with_arg_Resolver = (
  parent: {},
  args: Query_Args_Scalar_with_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Query_Scalar_with_custom_arg_Resolver = (
  parent: {},
  args: Query_Args_Scalar_with_custom_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export interface Query_Resolvers {
  id: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  custom_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode | Promise<NumberNode>;

  custom_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode | null | Promise<NumberNode | null>;

  custom_array_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | Array<NumberNode | null>
    | null
    | Promise<Array<NumberNode | null> | null>;

  custom_array_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<NumberNode | null> | Promise<Array<NumberNode | null>>;

  custom_with_arg: (
    parent: {},
    args: Query_Args_Custom_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode | Promise<NumberNode>;

  custom_with_custom_arg: (
    parent: {},
    args: Query_Args_Custom_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode | Promise<NumberNode>;

  scalar_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  scalar_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  scalar_array_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<boolean | null> | null | Promise<Array<boolean | null> | null>;

  scalar_array_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<boolean | null> | Promise<Array<boolean | null>>;

  scalar_with_arg: (
    parent: {},
    args: Query_Args_Scalar_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  scalar_with_custom_arg: (
    parent: {},
    args: Query_Args_Scalar_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
}

// Types for Number
export const Number_defaultResolvers = {
  id: (parent: NumberNode) => parent.id,
  value: (parent: NumberNode) => parent.value
};

export type Number_Id_Resolver = (
  parent: NumberNode,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | null | Promise<string | null>;

export type Number_Value_Resolver = (
  parent: NumberNode,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | null | Promise<number | null>;

export interface Number_Resolvers {
  id: (
    parent: NumberNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  value: (
    parent: NumberNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;
}

export interface Resolvers {
  Query: Query_Resolvers;
  Number: Number_Resolvers;
}
"
`;

exports[`defaultName 2`] = `
Array [
  Object {
    "code": "/* @flow */
import { Number_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Number_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Number: Number_Resolvers = {
  ...Number_defaultResolvers
};
",
    "force": false,
    "path": "Number.js",
  },
  Object {
    "code": "/* @flow */
import type { Query_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: Query_Resolvers = {
  id: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_required: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_nullable: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_nullable: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_required: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_arg: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_custom_arg: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_required: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_nullable: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_nullable: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_required: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_arg: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_custom_arg: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.js",
  },
  Object {
    "code": "// @flow
// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import type { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { Number } from \\"./Number\\";

export const resolvers: Resolvers = {
  Query,
  Number
};
",
    "force": false,
    "path": "index.js",
  },
]
`;

exports[`subscription 1`] = `
"/* @flow */
// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import type { GraphQLResolveInfo } from \\"graphql\\";
import type { User } from \\"../../fixtures/subscription/flow-types\\";
type Context = any;

// Types for Subscription
export const Subscription_defaultResolvers = {};

export type Subscription_SubscribeToUser_Resolver = {|
  subscribe: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AsyncIterator<User> | Promise<AsyncIterator<User>>,
  resolve?: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>
|};

export interface Subscription_Resolvers {
  subscribeToUser: {|
    subscribe: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AsyncIterator<User> | Promise<AsyncIterator<User>>,
    resolve?: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>
  |};
}

// Types for User
export const User_defaultResolvers = {
  name: (parent: User) => parent.name
};

export type User_Name_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export interface User_Resolvers {
  name: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
}

export interface Resolvers {
  Subscription: Subscription_Resolvers;
  User: User_Resolvers;
}
"
`;

exports[`subscription 2`] = `
Array [
  Object {
    "code": "/* @flow */
import { User_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { User_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const User: User_Resolvers = {
  ...User_defaultResolvers
};
",
    "force": false,
    "path": "User.js",
  },
  Object {
    "code": "/* @flow */
import type { Subscription_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Subscription: Subscription_Resolvers = {
  subscribeToUser: {
    subscribe: (parent, args, ctx, info) => {
      throw new Error(\\"Resolver not implemented\\");
    }
  }
};
",
    "force": false,
    "path": "Subscription.js",
  },
  Object {
    "code": "// @flow
// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import type { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Subscription } from \\"./Subscription\\";
import { User } from \\"./User\\";

export const resolvers: Resolvers = {
  Subscription,
  User
};
",
    "force": false,
    "path": "index.js",
  },
]
`;
