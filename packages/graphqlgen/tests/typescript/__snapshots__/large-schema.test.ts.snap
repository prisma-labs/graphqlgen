// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`large schema tests large schema 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import {
  Experience,
  ExperienceCategory,
  Location,
  Review,
  Picture,
  Home,
  Reservation,
  Neighbourhood,
  City,
  ExperiencesByCity,
  Viewer,
  User,
  Booking,
  Place,
  Amenities,
  Pricing,
  PlaceViews,
  GuestRequirements,
  Policies,
  HouseRules,
  Payment,
  PaymentAccount,
  PaypalInformation,
  CreditCardInformation,
  Notification,
  Message,
  AuthPayload,
  MutationResult
} from \\"../../fixtures/prisma/types\\";
type Context = any;

export type PLACE_SIZES =
  | \\"ENTIRE_HOUSE\\"
  | \\"ENTIRE_APARTMENT\\"
  | \\"ENTIRE_EARTH_HOUSE\\"
  | \\"ENTIRE_CABIN\\"
  | \\"ENTIRE_VILLA\\"
  | \\"ENTIRE_PLACE\\"
  | \\"ENTIRE_BOAT\\"
  | \\"PRIVATE_ROOM\\";
export type CURRENCY = \\"CAD\\" | \\"CHF\\" | \\"EUR\\" | \\"JPY\\" | \\"USD\\" | \\"ZAR\\";
export type PAYMENT_PROVIDER = \\"PAYPAL\\" | \\"CREDIT_CARD\\";
export type NOTIFICATION_TYPE =
  | \\"OFFER\\"
  | \\"INSTANT_BOOK\\"
  | \\"RESPONSIVENESS\\"
  | \\"NEW_AMENITIES\\"
  | \\"HOUSE_RULES\\";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsHomesInPriceRange {
    min: number;
    max: number;
  }

  export interface ArgsExperiencesByCity {
    cities: string[];
  }

  export type TopExperiencesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Experience[] | Promise<Experience[]>;
  export type TopHomesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Home[] | Promise<Home[]>;
  export type HomesInPriceRangeResolver = (
    parent: undefined,
    args: ArgsHomesInPriceRange,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Home[] | Promise<Home[]>;
  export type TopReservationsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Reservation[] | Promise<Reservation[]>;
  export type FeaturedDestinationsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Neighbourhood[] | Promise<Neighbourhood[]>;
  export type ExperiencesByCityResolver = (
    parent: undefined,
    args: ArgsExperiencesByCity,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => ExperiencesByCity[] | Promise<ExperiencesByCity[]>;
  export type ViewerResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Viewer | null | Promise<Viewer | null>;
  export type MyLocationResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Location | null | Promise<Location | null>;

  export interface Type {
    topExperiences: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Experience[] | Promise<Experience[]>;
    topHomes: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Home[] | Promise<Home[]>;
    homesInPriceRange: (
      parent: undefined,
      args: ArgsHomesInPriceRange,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Home[] | Promise<Home[]>;
    topReservations: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Reservation[] | Promise<Reservation[]>;
    featuredDestinations: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Neighbourhood[] | Promise<Neighbourhood[]>;
    experiencesByCity: (
      parent: undefined,
      args: ArgsExperiencesByCity,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => ExperiencesByCity[] | Promise<ExperiencesByCity[]>;
    viewer: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Viewer | null | Promise<Viewer | null>;
    myLocation: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Location | null | Promise<Location | null>;
  }
}

export namespace ExperienceResolvers {
  export const defaultResolvers = {
    id: (parent: Experience) => parent.id,
    category: (parent: Experience) =>
      parent.category === undefined ? null : parent.category,
    title: (parent: Experience) => parent.title,
    location: (parent: Experience) => parent.location,
    pricePerPerson: (parent: Experience) => parent.pricePerPerson,
    reviews: (parent: Experience) => parent.reviews,
    preview: (parent: Experience) => parent.preview,
    popularity: (parent: Experience) => parent.popularity
  };

  export type IdResolver = (
    parent: Experience,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type CategoryResolver = (
    parent: Experience,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => ExperienceCategory | null | Promise<ExperienceCategory | null>;
  export type TitleResolver = (
    parent: Experience,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type LocationResolver = (
    parent: Experience,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Location | Promise<Location>;
  export type PricePerPersonResolver = (
    parent: Experience,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type ReviewsResolver = (
    parent: Experience,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Review[] | Promise<Review[]>;
  export type PreviewResolver = (
    parent: Experience,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Picture | Promise<Picture>;
  export type PopularityResolver = (
    parent: Experience,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    id: (
      parent: Experience,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    category: (
      parent: Experience,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => ExperienceCategory | null | Promise<ExperienceCategory | null>;
    title: (
      parent: Experience,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    location: (
      parent: Experience,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Location | Promise<Location>;
    pricePerPerson: (
      parent: Experience,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    reviews: (
      parent: Experience,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Review[] | Promise<Review[]>;
    preview: (
      parent: Experience,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Picture | Promise<Picture>;
    popularity: (
      parent: Experience,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace ExperienceCategoryResolvers {
  export const defaultResolvers = {
    id: (parent: ExperienceCategory) => parent.id,
    mainColor: (parent: ExperienceCategory) => parent.mainColor,
    name: (parent: ExperienceCategory) => parent.name,
    experience: (parent: ExperienceCategory) =>
      parent.experience === undefined ? null : parent.experience
  };

  export type IdResolver = (
    parent: ExperienceCategory,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type MainColorResolver = (
    parent: ExperienceCategory,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type NameResolver = (
    parent: ExperienceCategory,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type ExperienceResolver = (
    parent: ExperienceCategory,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Experience | null | Promise<Experience | null>;

  export interface Type {
    id: (
      parent: ExperienceCategory,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    mainColor: (
      parent: ExperienceCategory,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    name: (
      parent: ExperienceCategory,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    experience: (
      parent: ExperienceCategory,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Experience | null | Promise<Experience | null>;
  }
}

export namespace LocationResolvers {
  export const defaultResolvers = {
    id: (parent: Location) => parent.id,
    lat: (parent: Location) => parent.lat,
    lng: (parent: Location) => parent.lng,
    address: (parent: Location) =>
      parent.address === undefined ? null : parent.address,
    directions: (parent: Location) =>
      parent.directions === undefined ? null : parent.directions
  };

  export type IdResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type LatResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type LngResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type AddressResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;
  export type DirectionsResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    id: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    lat: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    lng: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    address: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
    directions: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace ReviewResolvers {
  export const defaultResolvers = {
    accuracy: (parent: Review) => parent.accuracy,
    checkIn: (parent: Review) => parent.checkIn,
    cleanliness: (parent: Review) => parent.cleanliness,
    communication: (parent: Review) => parent.communication,
    createdAt: (parent: Review) => parent.createdAt,
    id: (parent: Review) => parent.id,
    location: (parent: Review) => parent.location,
    stars: (parent: Review) => parent.stars,
    text: (parent: Review) => parent.text,
    value: (parent: Review) => parent.value
  };

  export type AccuracyResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type CheckInResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type CleanlinessResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type CommunicationResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type CreatedAtResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type IdResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type LocationResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type StarsResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type TextResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type ValueResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    accuracy: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    checkIn: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    cleanliness: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    communication: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    createdAt: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    id: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    location: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    stars: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    text: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    value: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace PictureResolvers {
  export const defaultResolvers = {
    id: (parent: Picture) => parent.id,
    url: (parent: Picture) => parent.url
  };

  export type IdResolver = (
    parent: Picture,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type UrlResolver = (
    parent: Picture,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: Picture,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    url: (
      parent: Picture,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace HomeResolvers {
  export const defaultResolvers = {
    id: (parent: Home) => parent.id,
    name: (parent: Home) => (parent.name === undefined ? null : parent.name),
    description: (parent: Home) => parent.description,
    numRatings: (parent: Home) => parent.numRatings,
    avgRating: (parent: Home) =>
      parent.avgRating === undefined ? null : parent.avgRating,
    pictures: (parent: Home) => parent.pictures,
    perNight: (parent: Home) => parent.perNight
  };

  export interface ArgsPictures {
    first?: number | null;
  }

  export type IdResolver = (
    parent: Home,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type NameResolver = (
    parent: Home,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;
  export type DescriptionResolver = (
    parent: Home,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type NumRatingsResolver = (
    parent: Home,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type AvgRatingResolver = (
    parent: Home,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;
  export type PicturesResolver = (
    parent: Home,
    args: ArgsPictures,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Picture[] | Promise<Picture[]>;
  export type PerNightResolver = (
    parent: Home,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    id: (
      parent: Home,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    name: (
      parent: Home,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
    description: (
      parent: Home,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    numRatings: (
      parent: Home,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    avgRating: (
      parent: Home,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
    pictures: (
      parent: Home,
      args: ArgsPictures,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Picture[] | Promise<Picture[]>;
    perNight: (
      parent: Home,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace ReservationResolvers {
  export const defaultResolvers = {
    id: (parent: Reservation) => parent.id,
    title: (parent: Reservation) => parent.title,
    avgPricePerPerson: (parent: Reservation) => parent.avgPricePerPerson,
    pictures: (parent: Reservation) => parent.pictures,
    location: (parent: Reservation) => parent.location,
    isCurated: (parent: Reservation) => parent.isCurated,
    slug: (parent: Reservation) => parent.slug,
    popularity: (parent: Reservation) => parent.popularity
  };

  export type IdResolver = (
    parent: Reservation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type TitleResolver = (
    parent: Reservation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type AvgPricePerPersonResolver = (
    parent: Reservation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type PicturesResolver = (
    parent: Reservation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Picture[] | Promise<Picture[]>;
  export type LocationResolver = (
    parent: Reservation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Location | Promise<Location>;
  export type IsCuratedResolver = (
    parent: Reservation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type SlugResolver = (
    parent: Reservation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type PopularityResolver = (
    parent: Reservation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    id: (
      parent: Reservation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    title: (
      parent: Reservation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    avgPricePerPerson: (
      parent: Reservation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    pictures: (
      parent: Reservation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Picture[] | Promise<Picture[]>;
    location: (
      parent: Reservation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Location | Promise<Location>;
    isCurated: (
      parent: Reservation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    slug: (
      parent: Reservation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    popularity: (
      parent: Reservation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace NeighbourhoodResolvers {
  export const defaultResolvers = {
    id: (parent: Neighbourhood) => parent.id,
    name: (parent: Neighbourhood) => parent.name,
    slug: (parent: Neighbourhood) => parent.slug,
    homePreview: (parent: Neighbourhood) =>
      parent.homePreview === undefined ? null : parent.homePreview,
    city: (parent: Neighbourhood) => parent.city,
    featured: (parent: Neighbourhood) => parent.featured,
    popularity: (parent: Neighbourhood) => parent.popularity
  };

  export type IdResolver = (
    parent: Neighbourhood,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type NameResolver = (
    parent: Neighbourhood,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type SlugResolver = (
    parent: Neighbourhood,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type HomePreviewResolver = (
    parent: Neighbourhood,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Picture | null | Promise<Picture | null>;
  export type CityResolver = (
    parent: Neighbourhood,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => City | Promise<City>;
  export type FeaturedResolver = (
    parent: Neighbourhood,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type PopularityResolver = (
    parent: Neighbourhood,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    id: (
      parent: Neighbourhood,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    name: (
      parent: Neighbourhood,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    slug: (
      parent: Neighbourhood,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    homePreview: (
      parent: Neighbourhood,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Picture | null | Promise<Picture | null>;
    city: (
      parent: Neighbourhood,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => City | Promise<City>;
    featured: (
      parent: Neighbourhood,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    popularity: (
      parent: Neighbourhood,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace CityResolvers {
  export const defaultResolvers = {
    id: (parent: City) => parent.id,
    name: (parent: City) => parent.name
  };

  export type IdResolver = (
    parent: City,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type NameResolver = (
    parent: City,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: City,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    name: (
      parent: City,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace ExperiencesByCityResolvers {
  export const defaultResolvers = {
    experiences: (parent: ExperiencesByCity) => parent.experiences,
    city: (parent: ExperiencesByCity) => parent.city
  };

  export type ExperiencesResolver = (
    parent: ExperiencesByCity,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Experience[] | Promise<Experience[]>;
  export type CityResolver = (
    parent: ExperiencesByCity,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => City | Promise<City>;

  export interface Type {
    experiences: (
      parent: ExperiencesByCity,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Experience[] | Promise<Experience[]>;
    city: (
      parent: ExperiencesByCity,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => City | Promise<City>;
  }
}

export namespace ViewerResolvers {
  export const defaultResolvers = {
    me: (parent: Viewer) => parent.me,
    bookings: (parent: Viewer) => parent.bookings
  };

  export type MeResolver = (
    parent: Viewer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;
  export type BookingsResolver = (
    parent: Viewer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Booking[] | Promise<Booking[]>;

  export interface Type {
    me: (
      parent: Viewer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;
    bookings: (
      parent: Viewer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Booking[] | Promise<Booking[]>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    bookings: (parent: User) => parent.bookings,
    createdAt: (parent: User) => parent.createdAt,
    email: (parent: User) => parent.email,
    firstName: (parent: User) => parent.firstName,
    hostingExperiences: (parent: User) => parent.hostingExperiences,
    id: (parent: User) => parent.id,
    isSuperHost: (parent: User) => parent.isSuperHost,
    lastName: (parent: User) => parent.lastName,
    notifications: (parent: User) => parent.notifications,
    ownedPlaces: (parent: User) => parent.ownedPlaces,
    phone: (parent: User) => parent.phone,
    profilePicture: (parent: User) =>
      parent.profilePicture === undefined ? null : parent.profilePicture,
    receivedMessages: (parent: User) => parent.receivedMessages,
    responseRate: (parent: User) =>
      parent.responseRate === undefined ? null : parent.responseRate,
    responseTime: (parent: User) =>
      parent.responseTime === undefined ? null : parent.responseTime,
    sentMessages: (parent: User) => parent.sentMessages,
    updatedAt: (parent: User) => parent.updatedAt
  };

  export type BookingsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Booking[] | null | Promise<Booking[] | null>;
  export type CreatedAtResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type FirstNameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type HostingExperiencesResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Experience[] | null | Promise<Experience[] | null>;
  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type IsSuperHostResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type LastNameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type LocationResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Location | Promise<Location>;
  export type NotificationsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Notification[] | null | Promise<Notification[] | null>;
  export type OwnedPlacesResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Place[] | null | Promise<Place[] | null>;
  export type PaymentAccountResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PaymentAccount[] | null | Promise<PaymentAccount[] | null>;
  export type PhoneResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type ProfilePictureResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Picture | null | Promise<Picture | null>;
  export type ReceivedMessagesResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Message[] | null | Promise<Message[] | null>;
  export type ResponseRateResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;
  export type ResponseTimeResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;
  export type SentMessagesResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Message[] | null | Promise<Message[] | null>;
  export type UpdatedAtResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type TokenResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    bookings: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Booking[] | null | Promise<Booking[] | null>;
    createdAt: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    firstName: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    hostingExperiences: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Experience[] | null | Promise<Experience[] | null>;
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    isSuperHost: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    lastName: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    location: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Location | Promise<Location>;
    notifications: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Notification[] | null | Promise<Notification[] | null>;
    ownedPlaces: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Place[] | null | Promise<Place[] | null>;
    paymentAccount: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PaymentAccount[] | null | Promise<PaymentAccount[] | null>;
    phone: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    profilePicture: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Picture | null | Promise<Picture | null>;
    receivedMessages: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Message[] | null | Promise<Message[] | null>;
    responseRate: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
    responseTime: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
    sentMessages: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Message[] | null | Promise<Message[] | null>;
    updatedAt: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    token: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace BookingResolvers {
  export const defaultResolvers = {
    id: (parent: Booking) => parent.id,
    createdAt: (parent: Booking) => parent.createdAt,
    bookee: (parent: Booking) => parent.bookee,
    place: (parent: Booking) => parent.place,
    startDate: (parent: Booking) => parent.startDate,
    endDate: (parent: Booking) => parent.endDate,
    payment: (parent: Booking) => parent.payment
  };

  export type IdResolver = (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type CreatedAtResolver = (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type BookeeResolver = (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;
  export type PlaceResolver = (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Place | Promise<Place>;
  export type StartDateResolver = (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type EndDateResolver = (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type PaymentResolver = (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Payment | Promise<Payment>;

  export interface Type {
    id: (
      parent: Booking,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    createdAt: (
      parent: Booking,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    bookee: (
      parent: Booking,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;
    place: (
      parent: Booking,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Place | Promise<Place>;
    startDate: (
      parent: Booking,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    endDate: (
      parent: Booking,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    payment: (
      parent: Booking,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Payment | Promise<Payment>;
  }
}

export namespace PlaceResolvers {
  export const defaultResolvers = {
    id: (parent: Place) => parent.id,
    name: (parent: Place) => (parent.name === undefined ? null : parent.name),
    size: (parent: Place) => (parent.size === undefined ? null : parent.size),
    shortDescription: (parent: Place) => parent.shortDescription,
    description: (parent: Place) => parent.description,
    slug: (parent: Place) => parent.slug,
    maxGuests: (parent: Place) => parent.maxGuests,
    numBedrooms: (parent: Place) => parent.numBedrooms,
    numBeds: (parent: Place) => parent.numBeds,
    numBaths: (parent: Place) => parent.numBaths,
    reviews: (parent: Place) => parent.reviews,
    amenities: (parent: Place) => parent.amenities,
    host: (parent: Place) => parent.host,
    pricing: (parent: Place) => parent.pricing,
    location: (parent: Place) => parent.location,
    views: (parent: Place) => parent.views,
    guestRequirements: (parent: Place) =>
      parent.guestRequirements === undefined ? null : parent.guestRequirements,
    policies: (parent: Place) =>
      parent.policies === undefined ? null : parent.policies,
    houseRules: (parent: Place) =>
      parent.houseRules === undefined ? null : parent.houseRules,
    bookings: (parent: Place) => parent.bookings,
    pictures: (parent: Place) => parent.pictures,
    popularity: (parent: Place) => parent.popularity
  };

  export type IdResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type NameResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;
  export type SizeResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PLACE_SIZES | null | Promise<PLACE_SIZES | null>;
  export type ShortDescriptionResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type DescriptionResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type SlugResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type MaxGuestsResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type NumBedroomsResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type NumBedsResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type NumBathsResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type ReviewsResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Review[] | Promise<Review[]>;
  export type AmenitiesResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Amenities | Promise<Amenities>;
  export type HostResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;
  export type PricingResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Pricing | Promise<Pricing>;
  export type LocationResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Location | Promise<Location>;
  export type ViewsResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PlaceViews | Promise<PlaceViews>;
  export type GuestRequirementsResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => GuestRequirements | null | Promise<GuestRequirements | null>;
  export type PoliciesResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Policies | null | Promise<Policies | null>;
  export type HouseRulesResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => HouseRules | null | Promise<HouseRules | null>;
  export type BookingsResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Booking[] | Promise<Booking[]>;
  export type PicturesResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Picture[] | null | Promise<Picture[] | null>;
  export type PopularityResolver = (
    parent: Place,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    id: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    name: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
    size: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PLACE_SIZES | null | Promise<PLACE_SIZES | null>;
    shortDescription: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    description: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    slug: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    maxGuests: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    numBedrooms: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    numBeds: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    numBaths: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    reviews: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Review[] | Promise<Review[]>;
    amenities: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Amenities | Promise<Amenities>;
    host: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;
    pricing: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Pricing | Promise<Pricing>;
    location: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Location | Promise<Location>;
    views: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PlaceViews | Promise<PlaceViews>;
    guestRequirements: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => GuestRequirements | null | Promise<GuestRequirements | null>;
    policies: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Policies | null | Promise<Policies | null>;
    houseRules: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => HouseRules | null | Promise<HouseRules | null>;
    bookings: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Booking[] | Promise<Booking[]>;
    pictures: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Picture[] | null | Promise<Picture[] | null>;
    popularity: (
      parent: Place,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace AmenitiesResolvers {
  export const defaultResolvers = {
    airConditioning: (parent: Amenities) => parent.airConditioning,
    babyBath: (parent: Amenities) => parent.babyBath,
    babyMonitor: (parent: Amenities) => parent.babyMonitor,
    babysitterRecommendations: (parent: Amenities) =>
      parent.babysitterRecommendations,
    bathtub: (parent: Amenities) => parent.bathtub,
    breakfast: (parent: Amenities) => parent.breakfast,
    buzzerWirelessIntercom: (parent: Amenities) =>
      parent.buzzerWirelessIntercom,
    cableTv: (parent: Amenities) => parent.cableTv,
    changingTable: (parent: Amenities) => parent.changingTable,
    childrensBooksAndToys: (parent: Amenities) => parent.childrensBooksAndToys,
    childrensDinnerware: (parent: Amenities) => parent.childrensDinnerware,
    crib: (parent: Amenities) => parent.crib,
    doorman: (parent: Amenities) => parent.doorman,
    dryer: (parent: Amenities) => parent.dryer,
    elevator: (parent: Amenities) => parent.elevator,
    essentials: (parent: Amenities) => parent.essentials,
    familyKidFriendly: (parent: Amenities) => parent.familyKidFriendly,
    freeParkingOnPremises: (parent: Amenities) => parent.freeParkingOnPremises,
    freeParkingOnStreet: (parent: Amenities) => parent.freeParkingOnStreet,
    gym: (parent: Amenities) => parent.gym,
    hairDryer: (parent: Amenities) => parent.hairDryer,
    hangers: (parent: Amenities) => parent.hangers,
    heating: (parent: Amenities) => parent.heating,
    hotTub: (parent: Amenities) => parent.hotTub,
    id: (parent: Amenities) => parent.id,
    indoorFireplace: (parent: Amenities) => parent.indoorFireplace,
    internet: (parent: Amenities) => parent.internet,
    iron: (parent: Amenities) => parent.iron,
    kitchen: (parent: Amenities) => parent.kitchen,
    laptopFriendlyWorkspace: (parent: Amenities) =>
      parent.laptopFriendlyWorkspace,
    paidParkingOffPremises: (parent: Amenities) =>
      parent.paidParkingOffPremises,
    petsAllowed: (parent: Amenities) => parent.petsAllowed,
    pool: (parent: Amenities) => parent.pool,
    privateEntrance: (parent: Amenities) => parent.privateEntrance,
    shampoo: (parent: Amenities) => parent.shampoo,
    smokingAllowed: (parent: Amenities) => parent.smokingAllowed,
    suitableForEvents: (parent: Amenities) => parent.suitableForEvents,
    tv: (parent: Amenities) => parent.tv,
    washer: (parent: Amenities) => parent.washer,
    wheelchairAccessible: (parent: Amenities) => parent.wheelchairAccessible,
    wirelessInternet: (parent: Amenities) => parent.wirelessInternet
  };

  export type AirConditioningResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type BabyBathResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type BabyMonitorResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type BabysitterRecommendationsResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type BathtubResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type BreakfastResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type BuzzerWirelessIntercomResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type CableTvResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type ChangingTableResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type ChildrensBooksAndToysResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type ChildrensDinnerwareResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type CribResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type DoormanResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type DryerResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type ElevatorResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type EssentialsResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type FamilyKidFriendlyResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type FreeParkingOnPremisesResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type FreeParkingOnStreetResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type GymResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type HairDryerResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type HangersResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type HeatingResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type HotTubResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type IdResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type IndoorFireplaceResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type InternetResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type IronResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type KitchenResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type LaptopFriendlyWorkspaceResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type PaidParkingOffPremisesResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type PetsAllowedResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type PoolResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type PrivateEntranceResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type ShampooResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type SmokingAllowedResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type SuitableForEventsResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type TvResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type WasherResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type WheelchairAccessibleResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type WirelessInternetResolver = (
    parent: Amenities,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type {
    airConditioning: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    babyBath: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    babyMonitor: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    babysitterRecommendations: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    bathtub: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    breakfast: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    buzzerWirelessIntercom: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    cableTv: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    changingTable: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    childrensBooksAndToys: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    childrensDinnerware: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    crib: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    doorman: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    dryer: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    elevator: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    essentials: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    familyKidFriendly: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    freeParkingOnPremises: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    freeParkingOnStreet: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    gym: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    hairDryer: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    hangers: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    heating: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    hotTub: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    id: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    indoorFireplace: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    internet: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    iron: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    kitchen: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    laptopFriendlyWorkspace: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    paidParkingOffPremises: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    petsAllowed: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    pool: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    privateEntrance: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    shampoo: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    smokingAllowed: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    suitableForEvents: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    tv: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    washer: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    wheelchairAccessible: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    wirelessInternet: (
      parent: Amenities,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
  }
}

export namespace PricingResolvers {
  export const defaultResolvers = {
    averageMonthly: (parent: Pricing) => parent.averageMonthly,
    averageWeekly: (parent: Pricing) => parent.averageWeekly,
    basePrice: (parent: Pricing) => parent.basePrice,
    cleaningFee: (parent: Pricing) =>
      parent.cleaningFee === undefined ? null : parent.cleaningFee,
    currency: (parent: Pricing) =>
      parent.currency === undefined ? null : parent.currency,
    extraGuests: (parent: Pricing) =>
      parent.extraGuests === undefined ? null : parent.extraGuests,
    id: (parent: Pricing) => parent.id,
    monthlyDiscount: (parent: Pricing) =>
      parent.monthlyDiscount === undefined ? null : parent.monthlyDiscount,
    perNight: (parent: Pricing) => parent.perNight,
    securityDeposit: (parent: Pricing) =>
      parent.securityDeposit === undefined ? null : parent.securityDeposit,
    smartPricing: (parent: Pricing) => parent.smartPricing,
    weekendPricing: (parent: Pricing) =>
      parent.weekendPricing === undefined ? null : parent.weekendPricing,
    weeklyDiscount: (parent: Pricing) =>
      parent.weeklyDiscount === undefined ? null : parent.weeklyDiscount
  };

  export type AverageMonthlyResolver = (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type AverageWeeklyResolver = (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type BasePriceResolver = (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type CleaningFeeResolver = (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;
  export type CurrencyResolver = (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CURRENCY | null | Promise<CURRENCY | null>;
  export type ExtraGuestsResolver = (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;
  export type IdResolver = (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type MonthlyDiscountResolver = (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;
  export type PerNightResolver = (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type SecurityDepositResolver = (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;
  export type SmartPricingResolver = (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type WeekendPricingResolver = (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;
  export type WeeklyDiscountResolver = (
    parent: Pricing,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    averageMonthly: (
      parent: Pricing,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    averageWeekly: (
      parent: Pricing,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    basePrice: (
      parent: Pricing,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    cleaningFee: (
      parent: Pricing,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
    currency: (
      parent: Pricing,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CURRENCY | null | Promise<CURRENCY | null>;
    extraGuests: (
      parent: Pricing,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
    id: (
      parent: Pricing,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    monthlyDiscount: (
      parent: Pricing,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
    perNight: (
      parent: Pricing,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    securityDeposit: (
      parent: Pricing,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
    smartPricing: (
      parent: Pricing,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    weekendPricing: (
      parent: Pricing,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
    weeklyDiscount: (
      parent: Pricing,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export namespace PlaceViewsResolvers {
  export const defaultResolvers = {
    id: (parent: PlaceViews) => parent.id,
    lastWeek: (parent: PlaceViews) => parent.lastWeek
  };

  export type IdResolver = (
    parent: PlaceViews,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type LastWeekResolver = (
    parent: PlaceViews,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    id: (
      parent: PlaceViews,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    lastWeek: (
      parent: PlaceViews,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace GuestRequirementsResolvers {
  export const defaultResolvers = {
    govIssuedId: (parent: GuestRequirements) => parent.govIssuedId,
    guestTripInformation: (parent: GuestRequirements) =>
      parent.guestTripInformation,
    id: (parent: GuestRequirements) => parent.id,
    recommendationsFromOtherHosts: (parent: GuestRequirements) =>
      parent.recommendationsFromOtherHosts
  };

  export type GovIssuedIdResolver = (
    parent: GuestRequirements,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type GuestTripInformationResolver = (
    parent: GuestRequirements,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type IdResolver = (
    parent: GuestRequirements,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type RecommendationsFromOtherHostsResolver = (
    parent: GuestRequirements,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type {
    govIssuedId: (
      parent: GuestRequirements,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    guestTripInformation: (
      parent: GuestRequirements,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    id: (
      parent: GuestRequirements,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    recommendationsFromOtherHosts: (
      parent: GuestRequirements,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
  }
}

export namespace PoliciesResolvers {
  export const defaultResolvers = {
    checkInEndTime: (parent: Policies) => parent.checkInEndTime,
    checkInStartTime: (parent: Policies) => parent.checkInStartTime,
    checkoutTime: (parent: Policies) => parent.checkoutTime,
    createdAt: (parent: Policies) => parent.createdAt,
    id: (parent: Policies) => parent.id,
    updatedAt: (parent: Policies) => parent.updatedAt
  };

  export type CheckInEndTimeResolver = (
    parent: Policies,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type CheckInStartTimeResolver = (
    parent: Policies,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type CheckoutTimeResolver = (
    parent: Policies,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type CreatedAtResolver = (
    parent: Policies,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type IdResolver = (
    parent: Policies,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type UpdatedAtResolver = (
    parent: Policies,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    checkInEndTime: (
      parent: Policies,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    checkInStartTime: (
      parent: Policies,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    checkoutTime: (
      parent: Policies,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    createdAt: (
      parent: Policies,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    id: (
      parent: Policies,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    updatedAt: (
      parent: Policies,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace HouseRulesResolvers {
  export const defaultResolvers = {
    additionalRules: (parent: HouseRules) =>
      parent.additionalRules === undefined ? null : parent.additionalRules,
    createdAt: (parent: HouseRules) => parent.createdAt,
    id: (parent: HouseRules) => parent.id,
    partiesAndEventsAllowed: (parent: HouseRules) =>
      parent.partiesAndEventsAllowed === undefined
        ? null
        : parent.partiesAndEventsAllowed,
    petsAllowed: (parent: HouseRules) =>
      parent.petsAllowed === undefined ? null : parent.petsAllowed,
    smokingAllowed: (parent: HouseRules) =>
      parent.smokingAllowed === undefined ? null : parent.smokingAllowed,
    suitableForChildren: (parent: HouseRules) =>
      parent.suitableForChildren === undefined
        ? null
        : parent.suitableForChildren,
    suitableForInfants: (parent: HouseRules) =>
      parent.suitableForInfants === undefined
        ? null
        : parent.suitableForInfants,
    updatedAt: (parent: HouseRules) => parent.updatedAt
  };

  export type AdditionalRulesResolver = (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;
  export type CreatedAtResolver = (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type IdResolver = (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type PartiesAndEventsAllowedResolver = (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;
  export type PetsAllowedResolver = (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;
  export type SmokingAllowedResolver = (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;
  export type SuitableForChildrenResolver = (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;
  export type SuitableForInfantsResolver = (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;
  export type UpdatedAtResolver = (
    parent: HouseRules,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    additionalRules: (
      parent: HouseRules,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
    createdAt: (
      parent: HouseRules,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    id: (
      parent: HouseRules,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    partiesAndEventsAllowed: (
      parent: HouseRules,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;
    petsAllowed: (
      parent: HouseRules,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;
    smokingAllowed: (
      parent: HouseRules,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;
    suitableForChildren: (
      parent: HouseRules,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;
    suitableForInfants: (
      parent: HouseRules,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;
    updatedAt: (
      parent: HouseRules,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace PaymentResolvers {
  export const defaultResolvers = {
    booking: (parent: Payment) => parent.booking,
    createdAt: (parent: Payment) => parent.createdAt,
    id: (parent: Payment) => parent.id,
    paymentMethod: (parent: Payment) => parent.paymentMethod,
    serviceFee: (parent: Payment) => parent.serviceFee
  };

  export type BookingResolver = (
    parent: Payment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Booking | Promise<Booking>;
  export type CreatedAtResolver = (
    parent: Payment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type IdResolver = (
    parent: Payment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type PaymentMethodResolver = (
    parent: Payment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PaymentAccount | Promise<PaymentAccount>;
  export type ServiceFeeResolver = (
    parent: Payment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    booking: (
      parent: Payment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Booking | Promise<Booking>;
    createdAt: (
      parent: Payment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    id: (
      parent: Payment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    paymentMethod: (
      parent: Payment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PaymentAccount | Promise<PaymentAccount>;
    serviceFee: (
      parent: Payment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace PaymentAccountResolvers {
  export const defaultResolvers = {
    id: (parent: PaymentAccount) => parent.id,
    createdAt: (parent: PaymentAccount) => parent.createdAt,
    type: (parent: PaymentAccount) =>
      parent.type === undefined ? null : parent.type,
    user: (parent: PaymentAccount) => parent.user,
    payments: (parent: PaymentAccount) => parent.payments,
    paypal: (parent: PaymentAccount) =>
      parent.paypal === undefined ? null : parent.paypal,
    creditcard: (parent: PaymentAccount) =>
      parent.creditcard === undefined ? null : parent.creditcard
  };

  export type IdResolver = (
    parent: PaymentAccount,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type CreatedAtResolver = (
    parent: PaymentAccount,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type TypeResolver = (
    parent: PaymentAccount,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PAYMENT_PROVIDER | null | Promise<PAYMENT_PROVIDER | null>;
  export type UserResolver = (
    parent: PaymentAccount,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;
  export type PaymentsResolver = (
    parent: PaymentAccount,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Payment[] | Promise<Payment[]>;
  export type PaypalResolver = (
    parent: PaymentAccount,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PaypalInformation | null | Promise<PaypalInformation | null>;
  export type CreditcardResolver = (
    parent: PaymentAccount,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CreditCardInformation | null | Promise<CreditCardInformation | null>;

  export interface Type {
    id: (
      parent: PaymentAccount,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    createdAt: (
      parent: PaymentAccount,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    type: (
      parent: PaymentAccount,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PAYMENT_PROVIDER | null | Promise<PAYMENT_PROVIDER | null>;
    user: (
      parent: PaymentAccount,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;
    payments: (
      parent: PaymentAccount,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Payment[] | Promise<Payment[]>;
    paypal: (
      parent: PaymentAccount,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PaypalInformation | null | Promise<PaypalInformation | null>;
    creditcard: (
      parent: PaymentAccount,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CreditCardInformation | null | Promise<CreditCardInformation | null>;
  }
}

export namespace PaypalInformationResolvers {
  export const defaultResolvers = {
    createdAt: (parent: PaypalInformation) => parent.createdAt,
    email: (parent: PaypalInformation) => parent.email,
    id: (parent: PaypalInformation) => parent.id,
    paymentAccount: (parent: PaypalInformation) => parent.paymentAccount
  };

  export type CreatedAtResolver = (
    parent: PaypalInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type EmailResolver = (
    parent: PaypalInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type IdResolver = (
    parent: PaypalInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type PaymentAccountResolver = (
    parent: PaypalInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PaymentAccount | Promise<PaymentAccount>;

  export interface Type {
    createdAt: (
      parent: PaypalInformation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    email: (
      parent: PaypalInformation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    id: (
      parent: PaypalInformation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    paymentAccount: (
      parent: PaypalInformation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PaymentAccount | Promise<PaymentAccount>;
  }
}

export namespace CreditCardInformationResolvers {
  export const defaultResolvers = {
    cardNumber: (parent: CreditCardInformation) => parent.cardNumber,
    country: (parent: CreditCardInformation) => parent.country,
    createdAt: (parent: CreditCardInformation) => parent.createdAt,
    expiresOnMonth: (parent: CreditCardInformation) => parent.expiresOnMonth,
    expiresOnYear: (parent: CreditCardInformation) => parent.expiresOnYear,
    firstName: (parent: CreditCardInformation) => parent.firstName,
    id: (parent: CreditCardInformation) => parent.id,
    lastName: (parent: CreditCardInformation) => parent.lastName,
    paymentAccount: (parent: CreditCardInformation) =>
      parent.paymentAccount === undefined ? null : parent.paymentAccount,
    postalCode: (parent: CreditCardInformation) => parent.postalCode,
    securityCode: (parent: CreditCardInformation) => parent.securityCode
  };

  export type CardNumberResolver = (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type CountryResolver = (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type CreatedAtResolver = (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type ExpiresOnMonthResolver = (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type ExpiresOnYearResolver = (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type FirstNameResolver = (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type IdResolver = (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type LastNameResolver = (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type PaymentAccountResolver = (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PaymentAccount | null | Promise<PaymentAccount | null>;
  export type PostalCodeResolver = (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type SecurityCodeResolver = (
    parent: CreditCardInformation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    cardNumber: (
      parent: CreditCardInformation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    country: (
      parent: CreditCardInformation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    createdAt: (
      parent: CreditCardInformation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    expiresOnMonth: (
      parent: CreditCardInformation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    expiresOnYear: (
      parent: CreditCardInformation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    firstName: (
      parent: CreditCardInformation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    id: (
      parent: CreditCardInformation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    lastName: (
      parent: CreditCardInformation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    paymentAccount: (
      parent: CreditCardInformation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PaymentAccount | null | Promise<PaymentAccount | null>;
    postalCode: (
      parent: CreditCardInformation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    securityCode: (
      parent: CreditCardInformation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace NotificationResolvers {
  export const defaultResolvers = {
    createdAt: (parent: Notification) => parent.createdAt,
    id: (parent: Notification) => parent.id,
    link: (parent: Notification) => parent.link,
    readDate: (parent: Notification) => parent.readDate,
    type: (parent: Notification) =>
      parent.type === undefined ? null : parent.type,
    user: (parent: Notification) => parent.user
  };

  export type CreatedAtResolver = (
    parent: Notification,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type IdResolver = (
    parent: Notification,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type LinkResolver = (
    parent: Notification,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type ReadDateResolver = (
    parent: Notification,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type TypeResolver = (
    parent: Notification,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NOTIFICATION_TYPE | null | Promise<NOTIFICATION_TYPE | null>;
  export type UserResolver = (
    parent: Notification,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export interface Type {
    createdAt: (
      parent: Notification,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    id: (
      parent: Notification,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    link: (
      parent: Notification,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    readDate: (
      parent: Notification,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    type: (
      parent: Notification,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => NOTIFICATION_TYPE | null | Promise<NOTIFICATION_TYPE | null>;
    user: (
      parent: Notification,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;
  }
}

export namespace MessageResolvers {
  export const defaultResolvers = {
    createdAt: (parent: Message) => parent.createdAt,
    deliveredAt: (parent: Message) => parent.deliveredAt,
    id: (parent: Message) => parent.id,
    readAt: (parent: Message) => parent.readAt
  };

  export type CreatedAtResolver = (
    parent: Message,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type DeliveredAtResolver = (
    parent: Message,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type IdResolver = (
    parent: Message,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type ReadAtResolver = (
    parent: Message,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    createdAt: (
      parent: Message,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    deliveredAt: (
      parent: Message,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    id: (
      parent: Message,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    readAt: (
      parent: Message,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsSignup {
    email: string;
    password: string;
    firstName: string;
    lastName: string;
    phone: string;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export interface ArgsAddPaymentMethod {
    cardNumber: string;
    expiresOnMonth: number;
    expiresOnYear: number;
    securityCode: string;
    firstName: string;
    lastName: string;
    postalCode: string;
    country: string;
  }

  export interface ArgsBook {
    placeId: string;
    checkIn: string;
    checkOut: string;
    numGuests: number;
  }

  export type SignupResolver = (
    parent: undefined,
    args: ArgsSignup,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;
  export type LoginResolver = (
    parent: undefined,
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;
  export type AddPaymentMethodResolver = (
    parent: undefined,
    args: ArgsAddPaymentMethod,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MutationResult | Promise<MutationResult>;
  export type BookResolver = (
    parent: undefined,
    args: ArgsBook,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MutationResult | Promise<MutationResult>;

  export interface Type {
    signup: (
      parent: undefined,
      args: ArgsSignup,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;
    login: (
      parent: undefined,
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;
    addPaymentMethod: (
      parent: undefined,
      args: ArgsAddPaymentMethod,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => MutationResult | Promise<MutationResult>;
    book: (
      parent: undefined,
      args: ArgsBook,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => MutationResult | Promise<MutationResult>;
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token,
    user: (parent: AuthPayload) => parent.user
  };

  export type TokenResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type UserResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export interface Type {
    token: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    user: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;
  }
}

export namespace MutationResultResolvers {
  export const defaultResolvers = {
    success: (parent: MutationResult) => parent.success
  };

  export type SuccessResolver = (
    parent: MutationResult,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type {
    success: (
      parent: MutationResult,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Experience: ExperienceResolvers.Type;
  ExperienceCategory: ExperienceCategoryResolvers.Type;
  Location: LocationResolvers.Type;
  Review: ReviewResolvers.Type;
  Picture: PictureResolvers.Type;
  Home: HomeResolvers.Type;
  Reservation: ReservationResolvers.Type;
  Neighbourhood: NeighbourhoodResolvers.Type;
  City: CityResolvers.Type;
  ExperiencesByCity: ExperiencesByCityResolvers.Type;
  Viewer: ViewerResolvers.Type;
  User: UserResolvers.Type;
  Booking: BookingResolvers.Type;
  Place: PlaceResolvers.Type;
  Amenities: AmenitiesResolvers.Type;
  Pricing: PricingResolvers.Type;
  PlaceViews: PlaceViewsResolvers.Type;
  GuestRequirements: GuestRequirementsResolvers.Type;
  Policies: PoliciesResolvers.Type;
  HouseRules: HouseRulesResolvers.Type;
  Payment: PaymentResolvers.Type;
  PaymentAccount: PaymentAccountResolvers.Type;
  PaypalInformation: PaypalInformationResolvers.Type;
  CreditCardInformation: CreditCardInformationResolvers.Type;
  Notification: NotificationResolvers.Type;
  Message: MessageResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
  MutationResult: MutationResultResolvers.Type;
}

// @ts-ignore
declare module \\"graphql-tools\\" {
  interface IResolvers extends Resolvers {}
}
"
`;

exports[`large schema tests large schema 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { ExperienceResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Experience: ExperienceResolvers.Type = {
  ...ExperienceResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Experience.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { ExperienceCategoryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const ExperienceCategory: ExperienceCategoryResolvers.Type = {
  ...ExperienceCategoryResolvers.defaultResolvers
};
",
    "force": false,
    "path": "ExperienceCategory.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { LocationResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Location: LocationResolvers.Type = {
  ...LocationResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Location.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { ReviewResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Review: ReviewResolvers.Type = {
  ...ReviewResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Review.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { PictureResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Picture: PictureResolvers.Type = {
  ...PictureResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Picture.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { HomeResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Home: HomeResolvers.Type = {
  ...HomeResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Home.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { ReservationResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Reservation: ReservationResolvers.Type = {
  ...ReservationResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Reservation.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { NeighbourhoodResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Neighbourhood: NeighbourhoodResolvers.Type = {
  ...NeighbourhoodResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Neighbourhood.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { CityResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const City: CityResolvers.Type = {
  ...CityResolvers.defaultResolvers
};
",
    "force": false,
    "path": "City.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { ExperiencesByCityResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const ExperiencesByCity: ExperiencesByCityResolvers.Type = {
  ...ExperiencesByCityResolvers.defaultResolvers
};
",
    "force": false,
    "path": "ExperiencesByCity.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { ViewerResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Viewer: ViewerResolvers.Type = {
  ...ViewerResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Viewer.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { UserResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const User: UserResolvers.Type = {
  ...UserResolvers.defaultResolvers,

  location: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  paymentAccount: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  token: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "User.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { BookingResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Booking: BookingResolvers.Type = {
  ...BookingResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Booking.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { PlaceResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Place: PlaceResolvers.Type = {
  ...PlaceResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Place.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { AmenitiesResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Amenities: AmenitiesResolvers.Type = {
  ...AmenitiesResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Amenities.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { PricingResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Pricing: PricingResolvers.Type = {
  ...PricingResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Pricing.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { PlaceViewsResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const PlaceViews: PlaceViewsResolvers.Type = {
  ...PlaceViewsResolvers.defaultResolvers
};
",
    "force": false,
    "path": "PlaceViews.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { GuestRequirementsResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const GuestRequirements: GuestRequirementsResolvers.Type = {
  ...GuestRequirementsResolvers.defaultResolvers
};
",
    "force": false,
    "path": "GuestRequirements.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { PoliciesResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Policies: PoliciesResolvers.Type = {
  ...PoliciesResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Policies.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { HouseRulesResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const HouseRules: HouseRulesResolvers.Type = {
  ...HouseRulesResolvers.defaultResolvers
};
",
    "force": false,
    "path": "HouseRules.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { PaymentResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Payment: PaymentResolvers.Type = {
  ...PaymentResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Payment.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { PaymentAccountResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const PaymentAccount: PaymentAccountResolvers.Type = {
  ...PaymentAccountResolvers.defaultResolvers
};
",
    "force": false,
    "path": "PaymentAccount.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { PaypalInformationResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const PaypalInformation: PaypalInformationResolvers.Type = {
  ...PaypalInformationResolvers.defaultResolvers
};
",
    "force": false,
    "path": "PaypalInformation.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { CreditCardInformationResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const CreditCardInformation: CreditCardInformationResolvers.Type = {
  ...CreditCardInformationResolvers.defaultResolvers
};
",
    "force": false,
    "path": "CreditCardInformation.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { NotificationResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Notification: NotificationResolvers.Type = {
  ...NotificationResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Notification.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { MessageResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Message: MessageResolvers.Type = {
  ...MessageResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Message.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { AuthPayloadResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const AuthPayload: AuthPayloadResolvers.Type = {
  ...AuthPayloadResolvers.defaultResolvers
};
",
    "force": false,
    "path": "AuthPayload.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { MutationResultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const MutationResult: MutationResultResolvers.Type = {
  ...MutationResultResolvers.defaultResolvers
};
",
    "force": false,
    "path": "MutationResult.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { QueryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: QueryResolvers.Type = {
  ...QueryResolvers.defaultResolvers,
  topExperiences: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  topHomes: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  homesInPriceRange: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  topReservations: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  featuredDestinations: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  experiencesByCity: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  viewer: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  myLocation: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { MutationResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Mutation: MutationResolvers.Type = {
  ...MutationResolvers.defaultResolvers,
  signup: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  login: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  addPaymentMethod: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  book: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Mutation.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { Experience } from \\"./Experience\\";
import { ExperienceCategory } from \\"./ExperienceCategory\\";
import { Location } from \\"./Location\\";
import { Review } from \\"./Review\\";
import { Picture } from \\"./Picture\\";
import { Home } from \\"./Home\\";
import { Reservation } from \\"./Reservation\\";
import { Neighbourhood } from \\"./Neighbourhood\\";
import { City } from \\"./City\\";
import { ExperiencesByCity } from \\"./ExperiencesByCity\\";
import { Viewer } from \\"./Viewer\\";
import { User } from \\"./User\\";
import { Booking } from \\"./Booking\\";
import { Place } from \\"./Place\\";
import { Amenities } from \\"./Amenities\\";
import { Pricing } from \\"./Pricing\\";
import { PlaceViews } from \\"./PlaceViews\\";
import { GuestRequirements } from \\"./GuestRequirements\\";
import { Policies } from \\"./Policies\\";
import { HouseRules } from \\"./HouseRules\\";
import { Payment } from \\"./Payment\\";
import { PaymentAccount } from \\"./PaymentAccount\\";
import { PaypalInformation } from \\"./PaypalInformation\\";
import { CreditCardInformation } from \\"./CreditCardInformation\\";
import { Notification } from \\"./Notification\\";
import { Message } from \\"./Message\\";
import { Mutation } from \\"./Mutation\\";
import { AuthPayload } from \\"./AuthPayload\\";
import { MutationResult } from \\"./MutationResult\\";

export const resolvers: Resolvers = {
  Query,
  Experience,
  ExperienceCategory,
  Location,
  Review,
  Picture,
  Home,
  Reservation,
  Neighbourhood,
  City,
  ExperiencesByCity,
  Viewer,
  User,
  Booking,
  Place,
  Amenities,
  Pricing,
  PlaceViews,
  GuestRequirements,
  Policies,
  HouseRules,
  Payment,
  PaymentAccount,
  PaypalInformation,
  CreditCardInformation,
  Notification,
  Message,
  Mutation,
  AuthPayload,
  MutationResult
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;
