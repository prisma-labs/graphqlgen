// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic enum 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import { User } from \\"../../fixtures/enum/types\\";
type Context = any;

export type EnumAnnotation = \\"EDITOR\\" | \\"COLLABORATOR\\";
export type EnumAsUnionType = \\"RED\\" | \\"GREEN\\" | \\"BLUE\\";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsCreateUser {
    name: string;
    type: EnumAnnotation;
  }

  export type CreateUserResolver = (
    parent: undefined,
    args: ArgsCreateUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export interface Type {
    createUser: (
      parent: undefined,
      args: ArgsCreateUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    name: (parent: User) => parent.name,
    enumAsUnionType: (parent: User) => parent.enumAsUnionType
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type EnumAnnotationResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => EnumAnnotation | Promise<EnumAnnotation>;
  export type EnumAsUnionTypeResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => EnumAsUnionType | Promise<EnumAsUnionType>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    enumAnnotation: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => EnumAnnotation | Promise<EnumAnnotation>;
    enumAsUnionType: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => EnumAsUnionType | Promise<EnumAsUnionType>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
}

// @ts-ignore
declare module \\"graphql-tools\\" {
  interface IResolvers extends Resolvers {}
}
"
`;

exports[`basic enum 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { UserResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const User: UserResolvers.Type = {
  ...UserResolvers.defaultResolvers,

  enumAnnotation: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "User.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { QueryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: QueryResolvers.Type = {
  ...QueryResolvers.defaultResolvers,
  createUser: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { User } from \\"./User\\";

export const resolvers: Resolvers = {
  Query,
  User
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`basic input 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import { AddMemberPayload } from \\"../../fixtures/input/types\\";
type Context = any;

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface AddMemberData {
    email: string;
    projects: string[];
    sideProjects?: Array<string | null> | null;
    profile: ProfileData | null;
    phones: Array<PhoneData | null>;
    isVIP: boolean;
  }
  export interface ProfileData {
    firstName?: string | null;
    lastName?: string | null;
    photo?: Photo | null;
  }
  export interface PhoneData {
    number: string;
  }
  export interface Photo {
    title: string;
    url: string;
  }

  export interface ArgsAddMember {
    data: AddMemberData;
    upsert: boolean;
    note: string | null;
  }

  export interface ArgsAddMembers {
    data: AddMemberData[];
  }

  export type AddMemberResolver = (
    parent: undefined,
    args: ArgsAddMember,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AddMemberPayload | Promise<AddMemberPayload>;
  export type AddMembersResolver = (
    parent: undefined,
    args: ArgsAddMembers,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AddMemberPayload | Promise<AddMemberPayload>;

  export interface Type {
    addMember: (
      parent: undefined,
      args: ArgsAddMember,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AddMemberPayload | Promise<AddMemberPayload>;
    addMembers: (
      parent: undefined,
      args: ArgsAddMembers,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AddMemberPayload | Promise<AddMemberPayload>;
  }
}

export namespace AddMemberPayloadResolvers {
  export const defaultResolvers = {
    newUserId: (parent: AddMemberPayload) => parent.newUserId
  };

  export type NewUserIdResolver = (
    parent: AddMemberPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;
  export type ExistingUserInviteSentResolver = (
    parent: AddMemberPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export interface Type {
    newUserId: (
      parent: AddMemberPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
    existingUserInviteSent: (
      parent: AddMemberPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;
  }
}

export interface Resolvers {
  Mutation: MutationResolvers.Type;
  AddMemberPayload: AddMemberPayloadResolvers.Type;
}

// @ts-ignore
declare module \\"graphql-tools\\" {
  interface IResolvers extends Resolvers {}
}
"
`;

exports[`basic input 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { AddMemberPayloadResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const AddMemberPayload: AddMemberPayloadResolvers.Type = {
  ...AddMemberPayloadResolvers.defaultResolvers,

  existingUserInviteSent: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "AddMemberPayload.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { MutationResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Mutation: MutationResolvers.Type = {
  ...MutationResolvers.defaultResolvers,
  addMember: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  addMembers: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Mutation.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Mutation } from \\"./Mutation\\";
import { AddMemberPayload } from \\"./AddMemberPayload\\";

export const resolvers: Resolvers = {
  Mutation,
  AddMemberPayload
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`basic interface 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo, GraphQLIsTypeOfFn } from \\"graphql\\";
import { Dimensions, Image, Video } from \\"../../../fixtures/interface/types\\";
type Context = any;

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsMedia {
    first?: number | null;
  }

  export interface ArgsMediaItem {
    id: number;
  }

  export type MediaResolver = (
    parent: undefined,
    args: ArgsMedia,
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | Array<Image | Video | null>
    | null
    | Promise<Array<Image | Video | null> | null>;
  export type MediaItemResolver = (
    parent: undefined,
    args: ArgsMediaItem,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Image | Video | null | Promise<Image | Video | null>;

  export interface Type {
    media: (
      parent: undefined,
      args: ArgsMedia,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | Array<Image | Video | null>
      | null
      | Promise<Array<Image | Video | null> | null>;
    mediaItem: (
      parent: undefined,
      args: ArgsMediaItem,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Image | Video | null | Promise<Image | Video | null>;
  }
}

export namespace DimensionsResolvers {
  export const defaultResolvers = {
    width: (parent: Dimensions) => parent.width,
    height: (parent: Dimensions) => parent.height
  };

  export type WidthResolver = (
    parent: Dimensions,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
  export type HeightResolver = (
    parent: Dimensions,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    width: (
      parent: Dimensions,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    height: (
      parent: Dimensions,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace ImageResolvers {
  export const defaultResolvers = {
    dimensions: (parent: Image) => parent.dimensions
  };

  export type IdResolver = (
    parent: Image,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type UrlResolver = (
    parent: Image,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type DimensionsResolver = (
    parent: Image,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Dimensions | Promise<Dimensions>;

  export interface Type {
    id: (
      parent: Image,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    url: (
      parent: Image,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    dimensions: (
      parent: Image,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Dimensions | Promise<Dimensions>;
    __isTypeOf?: GraphQLIsTypeOfFn<Image | Video, Context>;
  }
}

export namespace VideoResolvers {
  export const defaultResolvers = {};

  export type IdResolver = (
    parent: Video,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type UrlResolver = (
    parent: Video,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type DurationResolver = (
    parent: Video,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    id: (
      parent: Video,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    url: (
      parent: Video,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    duration: (
      parent: Video,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    __isTypeOf?: GraphQLIsTypeOfFn<Image | Video, Context>;
  }
}

export namespace MediaResolvers {
  export interface Type {
    __resolveType: (
      value: Image | Video,
      context: Context,
      info: GraphQLResolveInfo
    ) => \\"Image\\" | \\"Video\\" | Promise<\\"Image\\" | \\"Video\\">;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Dimensions: DimensionsResolvers.Type;
  Image: ImageResolvers.Type;
  Video: VideoResolvers.Type;
  Media?: MediaResolvers.Type;
}

// @ts-ignore
declare module \\"graphql-tools\\" {
  interface IResolvers extends Resolvers {}
}
"
`;

exports[`basic interface 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { DimensionsResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Dimensions: DimensionsResolvers.Type = {
  ...DimensionsResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Dimensions.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { ImageResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Image: ImageResolvers.Type = {
  ...ImageResolvers.defaultResolvers,

  id: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  url: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Image.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { VideoResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Video: VideoResolvers.Type = {
  ...VideoResolvers.defaultResolvers,

  id: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  url: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  duration: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Video.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { MediaResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Media: MediaResolvers.Type = {
  __resolveType: (parent, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Media.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { QueryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: QueryResolvers.Type = {
  ...QueryResolvers.defaultResolvers,
  media: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  mediaItem: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { Dimensions } from \\"./Dimensions\\";
import { Image } from \\"./Image\\";
import { Video } from \\"./Video\\";

export const resolvers: Resolvers = {
  Query,
  Dimensions,
  Image,
  Video
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`basic scalar 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import { AddMemberPayload } from \\"../../fixtures/scalar/types\\";
type Context = any;

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface AddMemberData {
    email: string;
    projects: string[];
  }

  export interface ArgsAddMember {
    data: AddMemberData;
  }

  export type AddMemberResolver = (
    parent: undefined,
    args: ArgsAddMember,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AddMemberPayload | Promise<AddMemberPayload>;

  export interface Type {
    addMember: (
      parent: undefined,
      args: ArgsAddMember,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AddMemberPayload | Promise<AddMemberPayload>;
  }
}

export namespace AddMemberPayloadResolvers {
  export const defaultResolvers = {
    json: (parent: AddMemberPayload) => parent.json
  };

  export type JsonResolver = (
    parent: AddMemberPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    json: (
      parent: AddMemberPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export interface Resolvers {
  Mutation: MutationResolvers.Type;
  AddMemberPayload: AddMemberPayloadResolvers.Type;
}

// @ts-ignore
declare module \\"graphql-tools\\" {
  interface IResolvers extends Resolvers {}
}
"
`;

exports[`basic scalar 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { AddMemberPayloadResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const AddMemberPayload: AddMemberPayloadResolvers.Type = {
  ...AddMemberPayloadResolvers.defaultResolvers
};
",
    "force": false,
    "path": "AddMemberPayload.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { MutationResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Mutation: MutationResolvers.Type = {
  ...MutationResolvers.defaultResolvers,
  addMember: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Mutation.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Mutation } from \\"./Mutation\\";
import { AddMemberPayload } from \\"./AddMemberPayload\\";

export const resolvers: Resolvers = {
  Mutation,
  AddMemberPayload
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`basic schema 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import { Number } from \\"../../fixtures/basic\\";
type Context = any;

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsCustom_with_arg {
    id: number;
  }

  export interface ArgsCustom_with_custom_arg {
    id: Number;
  }

  export interface ArgsScalar_with_arg {
    id: number;
  }

  export interface ArgsScalar_with_custom_arg {
    id: Number;
  }

  export type IdResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type Custom_requiredResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;
  export type Custom_nullableResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | null | Promise<Number | null>;
  export type Custom_array_nullableResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Number | null> | null | Promise<Array<Number | null> | null>;
  export type Custom_array_requiredResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Number | null> | Promise<Array<Number | null>>;
  export type Custom_with_argResolver = (
    parent: undefined,
    args: ArgsCustom_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;
  export type Custom_with_custom_argResolver = (
    parent: undefined,
    args: ArgsCustom_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;
  export type Scalar_requiredResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type Scalar_nullableResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;
  export type Scalar_array_nullableResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<boolean | null> | null | Promise<Array<boolean | null> | null>;
  export type Scalar_array_requiredResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<boolean | null> | Promise<Array<boolean | null>>;
  export type Scalar_with_argResolver = (
    parent: undefined,
    args: ArgsScalar_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type Scalar_with_custom_argResolver = (
    parent: undefined,
    args: ArgsScalar_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type {
    id: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    custom_required: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Number | Promise<Number>;
    custom_nullable: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Number | null | Promise<Number | null>;
    custom_array_nullable: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Number | null> | null | Promise<Array<Number | null> | null>;
    custom_array_required: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Number | null> | Promise<Array<Number | null>>;
    custom_with_arg: (
      parent: undefined,
      args: ArgsCustom_with_arg,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Number | Promise<Number>;
    custom_with_custom_arg: (
      parent: undefined,
      args: ArgsCustom_with_custom_arg,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Number | Promise<Number>;
    scalar_required: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    scalar_nullable: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;
    scalar_array_nullable: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<boolean | null> | null | Promise<Array<boolean | null> | null>;
    scalar_array_required: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<boolean | null> | Promise<Array<boolean | null>>;
    scalar_with_arg: (
      parent: undefined,
      args: ArgsScalar_with_arg,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    scalar_with_custom_arg: (
      parent: undefined,
      args: ArgsScalar_with_custom_arg,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
  }
}

export namespace NumberResolvers {
  export const defaultResolvers = {
    id: (parent: Number) => parent.id,
    value: (parent: Number) => parent.value
  };

  export type IdResolver = (
    parent: Number,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;
  export type ValueResolver = (
    parent: Number,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    id: (
      parent: Number,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
    value: (
      parent: Number,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Number: NumberResolvers.Type;
}

// @ts-ignore
declare module \\"graphql-tools\\" {
  interface IResolvers extends Resolvers {}
}
"
`;

exports[`basic schema 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { NumberResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Number: NumberResolvers.Type = {
  ...NumberResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Number.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { QueryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: QueryResolvers.Type = {
  ...QueryResolvers.defaultResolvers,
  id: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_custom_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_custom_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { Number } from \\"./Number\\";

export const resolvers: Resolvers = {
  Query,
  Number
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`basic schema with delegated parent resolvers 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import { Number } from \\"../../fixtures/basic\\";
type Context = any;

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsCustom_with_arg {
    id: number;
  }

  export interface ArgsCustom_with_custom_arg {
    id: Number;
  }

  export interface ArgsScalar_with_arg {
    id: number;
  }

  export interface ArgsScalar_with_custom_arg {
    id: Number;
  }

  export type IdResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type Custom_requiredResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Number | Promise<Number>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Number | Promise<Number>;
      };

  export type Custom_nullableResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Number | null | Promise<Number | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Number | null | Promise<Number | null>;
      };

  export type Custom_array_nullableResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<Number | null> | null | Promise<Array<Number | null> | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Number | null> | null | Promise<Array<Number | null> | null>;
      };

  export type Custom_array_requiredResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<Number | null> | Promise<Array<Number | null>>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Number | null> | Promise<Array<Number | null>>;
      };

  export type Custom_with_argResolver =
    | ((
        parent: undefined,
        args: ArgsCustom_with_arg,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Number | Promise<Number>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCustom_with_arg,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Number | Promise<Number>;
      };

  export type Custom_with_custom_argResolver =
    | ((
        parent: undefined,
        args: ArgsCustom_with_custom_arg,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Number | Promise<Number>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCustom_with_custom_arg,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Number | Promise<Number>;
      };

  export type Scalar_requiredResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type Scalar_nullableResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | null | Promise<boolean | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>;
      };

  export type Scalar_array_nullableResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<boolean | null> | null | Promise<Array<boolean | null> | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | Array<boolean | null>
          | null
          | Promise<Array<boolean | null> | null>;
      };

  export type Scalar_array_requiredResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<boolean | null> | Promise<Array<boolean | null>>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<boolean | null> | Promise<Array<boolean | null>>;
      };

  export type Scalar_with_argResolver =
    | ((
        parent: undefined,
        args: ArgsScalar_with_arg,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsScalar_with_arg,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type Scalar_with_custom_argResolver =
    | ((
        parent: undefined,
        args: ArgsScalar_with_custom_arg,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsScalar_with_custom_arg,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export interface Type {
    id:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    custom_required:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Number | Promise<Number>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Number | Promise<Number>;
        };

    custom_nullable:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Number | null | Promise<Number | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Number | null | Promise<Number | null>;
        };

    custom_array_nullable:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Number | null> | null | Promise<Array<Number | null> | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | Array<Number | null>
            | null
            | Promise<Array<Number | null> | null>;
        };

    custom_array_required:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Number | null> | Promise<Array<Number | null>>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<Number | null> | Promise<Array<Number | null>>;
        };

    custom_with_arg:
      | ((
          parent: undefined,
          args: ArgsCustom_with_arg,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Number | Promise<Number>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCustom_with_arg,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Number | Promise<Number>;
        };

    custom_with_custom_arg:
      | ((
          parent: undefined,
          args: ArgsCustom_with_custom_arg,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Number | Promise<Number>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCustom_with_custom_arg,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Number | Promise<Number>;
        };

    scalar_required:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    scalar_nullable:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | null | Promise<boolean | null>;
        };

    scalar_array_nullable:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | Array<boolean | null>
          | null
          | Promise<Array<boolean | null> | null>
        )
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | Array<boolean | null>
            | null
            | Promise<Array<boolean | null> | null>;
        };

    scalar_array_required:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<boolean | null> | Promise<Array<boolean | null>>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<boolean | null> | Promise<Array<boolean | null>>;
        };

    scalar_with_arg:
      | ((
          parent: undefined,
          args: ArgsScalar_with_arg,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsScalar_with_arg,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    scalar_with_custom_arg:
      | ((
          parent: undefined,
          args: ArgsScalar_with_custom_arg,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsScalar_with_custom_arg,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };
  }
}

export namespace NumberResolvers {
  export const defaultResolvers = {
    id: (parent: Number) => parent.id,
    value: (parent: Number) => parent.value
  };

  export type IdResolver =
    | ((
        parent: Number,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Number,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type ValueResolver =
    | ((
        parent: Number,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | null | Promise<number | null>)
    | {
        fragment: string;
        resolve: (
          parent: Number,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>;
      };

  export interface Type {
    id:
      | ((
          parent: Number,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Number,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    value:
      | ((
          parent: Number,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>)
      | {
          fragment: string;
          resolve: (
            parent: Number,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | null | Promise<number | null>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Number: NumberResolvers.Type;
}

// @ts-ignore
declare module \\"graphql-tools\\" {
  interface IResolvers extends Resolvers {}
}
"
`;

exports[`basic schema with delegated parent resolvers 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { NumberResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Number: NumberResolvers.Type = {
  ...NumberResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Number.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { QueryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: QueryResolvers.Type = {
  ...QueryResolvers.defaultResolvers,
  id: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_custom_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_custom_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { Number } from \\"./Number\\";

export const resolvers: Resolvers = {
  Query,
  Number
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`basic union 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo, GraphQLIsTypeOfFn } from \\"graphql\\";
import { Student, Professor, User } from \\"../../fixtures/union/types\\";
type Context = any;

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsUsers {
    first?: number | null;
  }

  export type UsersResolver = (
    parent: undefined,
    args: ArgsUsers,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Student | Professor> | Promise<Array<Student | Professor>>;

  export interface Type {
    users: (
      parent: undefined,
      args: ArgsUsers,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Student | Professor> | Promise<Array<Student | Professor>>;
  }
}

export namespace StudentResolvers {
  export const defaultResolvers = {
    age: (parent: Student) => parent.age
  };

  export type AgeResolver = (
    parent: Student,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    age: (
      parent: Student,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    __isTypeOf?: GraphQLIsTypeOfFn<Student | Professor, Context>;
  }
}

export namespace ProfessorResolvers {
  export const defaultResolvers = {
    degree: (parent: Professor) => parent.degree
  };

  export type DegreeResolver = (
    parent: Professor,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    degree: (
      parent: Professor,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
    __isTypeOf?: GraphQLIsTypeOfFn<Student | Professor, Context>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    name: (parent: User) => parent.name
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace UserTypeResolvers {
  export interface Type {
    __resolveType?: (
      value: Student | Professor,
      context: Context,
      info: GraphQLResolveInfo
    ) => \\"Student\\" | \\"Professor\\" | Promise<\\"Student\\" | \\"Professor\\">;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Student: StudentResolvers.Type;
  Professor: ProfessorResolvers.Type;
  User: UserResolvers.Type;
  UserType?: UserTypeResolvers.Type;
}

// @ts-ignore
declare module \\"graphql-tools\\" {
  interface IResolvers extends Resolvers {}
}
"
`;

exports[`basic union 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { StudentResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Student: StudentResolvers.Type = {
  ...StudentResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Student.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { ProfessorResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Professor: ProfessorResolvers.Type = {
  ...ProfessorResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Professor.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { UserResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const User: UserResolvers.Type = {
  ...UserResolvers.defaultResolvers
};
",
    "force": false,
    "path": "User.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { UserTypeResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const UserType: UserTypeResolvers.Type = {
  __resolveType: (parent, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "UserType.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { QueryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: QueryResolvers.Type = {
  ...QueryResolvers.defaultResolvers,
  users: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { Student } from \\"./Student\\";
import { Professor } from \\"./Professor\\";
import { User } from \\"./User\\";

export const resolvers: Resolvers = {
  Query,
  Student,
  Professor,
  User
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`context 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import { User, Context } from \\"../../fixtures/context/types\\";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export type CreateUserResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export interface Type {
    createUser: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
}

// @ts-ignore
declare module \\"graphql-tools\\" {
  interface IResolvers extends Resolvers {}
}
"
`;

exports[`context 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { UserResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const User: UserResolvers.Type = {
  ...UserResolvers.defaultResolvers
};
",
    "force": false,
    "path": "User.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { QueryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: QueryResolvers.Type = {
  ...QueryResolvers.defaultResolvers,
  createUser: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { User } from \\"./User\\";

export const resolvers: Resolvers = {
  Query,
  User
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`defaultName 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import { NumberNode } from \\"../../fixtures/defaultName\\";
type Context = any;

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsCustom_with_arg {
    id: number;
  }

  export interface ArgsCustom_with_custom_arg {
    id: NumberNode;
  }

  export interface ArgsScalar_with_arg {
    id: number;
  }

  export interface ArgsScalar_with_custom_arg {
    id: NumberNode;
  }

  export type IdResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type Custom_requiredResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode | Promise<NumberNode>;
  export type Custom_nullableResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode | null | Promise<NumberNode | null>;
  export type Custom_array_nullableResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | Array<NumberNode | null>
    | null
    | Promise<Array<NumberNode | null> | null>;
  export type Custom_array_requiredResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<NumberNode | null> | Promise<Array<NumberNode | null>>;
  export type Custom_with_argResolver = (
    parent: undefined,
    args: ArgsCustom_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode | Promise<NumberNode>;
  export type Custom_with_custom_argResolver = (
    parent: undefined,
    args: ArgsCustom_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode | Promise<NumberNode>;
  export type Scalar_requiredResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type Scalar_nullableResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;
  export type Scalar_array_nullableResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<boolean | null> | null | Promise<Array<boolean | null> | null>;
  export type Scalar_array_requiredResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<boolean | null> | Promise<Array<boolean | null>>;
  export type Scalar_with_argResolver = (
    parent: undefined,
    args: ArgsScalar_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type Scalar_with_custom_argResolver = (
    parent: undefined,
    args: ArgsScalar_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type {
    id: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    custom_required: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => NumberNode | Promise<NumberNode>;
    custom_nullable: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => NumberNode | null | Promise<NumberNode | null>;
    custom_array_nullable: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | Array<NumberNode | null>
      | null
      | Promise<Array<NumberNode | null> | null>;
    custom_array_required: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<NumberNode | null> | Promise<Array<NumberNode | null>>;
    custom_with_arg: (
      parent: undefined,
      args: ArgsCustom_with_arg,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => NumberNode | Promise<NumberNode>;
    custom_with_custom_arg: (
      parent: undefined,
      args: ArgsCustom_with_custom_arg,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => NumberNode | Promise<NumberNode>;
    scalar_required: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    scalar_nullable: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;
    scalar_array_nullable: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<boolean | null> | null | Promise<Array<boolean | null> | null>;
    scalar_array_required: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<boolean | null> | Promise<Array<boolean | null>>;
    scalar_with_arg: (
      parent: undefined,
      args: ArgsScalar_with_arg,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    scalar_with_custom_arg: (
      parent: undefined,
      args: ArgsScalar_with_custom_arg,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
  }
}

export namespace NumberResolvers {
  export const defaultResolvers = {
    id: (parent: NumberNode) => parent.id,
    value: (parent: NumberNode) => parent.value
  };

  export type IdResolver = (
    parent: NumberNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;
  export type ValueResolver = (
    parent: NumberNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    id: (
      parent: NumberNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
    value: (
      parent: NumberNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Number: NumberResolvers.Type;
}

// @ts-ignore
declare module \\"graphql-tools\\" {
  interface IResolvers extends Resolvers {}
}
"
`;

exports[`defaultName 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { NumberResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Number: NumberResolvers.Type = {
  ...NumberResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Number.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { QueryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: QueryResolvers.Type = {
  ...QueryResolvers.defaultResolvers,
  id: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_custom_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_custom_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { Number } from \\"./Number\\";

export const resolvers: Resolvers = {
  Query,
  Number
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`override model 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import { Number } from \\"../../../fixtures/basic\\";
type Context = any;

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsCustom_with_arg {
    id: number;
  }

  export interface ArgsCustom_with_custom_arg {
    id: Number;
  }

  export interface ArgsScalar_with_arg {
    id: number;
  }

  export interface ArgsScalar_with_custom_arg {
    id: Number;
  }

  export type IdResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;
  export type Custom_requiredResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;
  export type Custom_nullableResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | null | Promise<Number | null>;
  export type Custom_array_nullableResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Number | null> | null | Promise<Array<Number | null> | null>;
  export type Custom_array_requiredResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Number | null> | Promise<Array<Number | null>>;
  export type Custom_with_argResolver = (
    parent: undefined,
    args: ArgsCustom_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;
  export type Custom_with_custom_argResolver = (
    parent: undefined,
    args: ArgsCustom_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;
  export type Scalar_requiredResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type Scalar_nullableResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;
  export type Scalar_array_nullableResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<boolean | null> | null | Promise<Array<boolean | null> | null>;
  export type Scalar_array_requiredResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<boolean | null> | Promise<Array<boolean | null>>;
  export type Scalar_with_argResolver = (
    parent: undefined,
    args: ArgsScalar_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
  export type Scalar_with_custom_argResolver = (
    parent: undefined,
    args: ArgsScalar_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type {
    id: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    custom_required: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Number | Promise<Number>;
    custom_nullable: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Number | null | Promise<Number | null>;
    custom_array_nullable: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Number | null> | null | Promise<Array<Number | null> | null>;
    custom_array_required: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Number | null> | Promise<Array<Number | null>>;
    custom_with_arg: (
      parent: undefined,
      args: ArgsCustom_with_arg,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Number | Promise<Number>;
    custom_with_custom_arg: (
      parent: undefined,
      args: ArgsCustom_with_custom_arg,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Number | Promise<Number>;
    scalar_required: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    scalar_nullable: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;
    scalar_array_nullable: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<boolean | null> | null | Promise<Array<boolean | null> | null>;
    scalar_array_required: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<boolean | null> | Promise<Array<boolean | null>>;
    scalar_with_arg: (
      parent: undefined,
      args: ArgsScalar_with_arg,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    scalar_with_custom_arg: (
      parent: undefined,
      args: ArgsScalar_with_custom_arg,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
  }
}

export namespace NumberResolvers {
  export const defaultResolvers = {
    id: (parent: Number) => parent.id,
    value: (parent: Number) => parent.value
  };

  export type IdResolver = (
    parent: Number,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;
  export type ValueResolver = (
    parent: Number,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    id: (
      parent: Number,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
    value: (
      parent: Number,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Number: NumberResolvers.Type;
}

// @ts-ignore
declare module \\"graphql-tools\\" {
  interface IResolvers extends Resolvers {}
}
"
`;

exports[`override model 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { NumberResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Number: NumberResolvers.Type = {
  ...NumberResolvers.defaultResolvers
};
",
    "force": false,
    "path": "Number.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { QueryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: QueryResolvers.Type = {
  ...QueryResolvers.defaultResolvers,
  id: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_custom_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_custom_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { Number } from \\"./Number\\";

export const resolvers: Resolvers = {
  Query,
  Number
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`subscription 1`] = `
"// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import { User } from \\"../../fixtures/subscription/types\\";
type Context = any;

export namespace SubscriptionResolvers {
  export const defaultResolvers = {};

  export type SubscribeToUserResolver = {
    subscribe: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AsyncIterator<User> | Promise<AsyncIterator<User>>;
    resolve?: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;
  };

  export interface Type {
    subscribeToUser: {
      subscribe: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AsyncIterator<User> | Promise<AsyncIterator<User>>;
      resolve?: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>;
    };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    name: (parent: User) => parent.name
  };

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export interface Resolvers {
  Subscription: SubscriptionResolvers.Type;
  User: UserResolvers.Type;
}

// @ts-ignore
declare module \\"graphql-tools\\" {
  interface IResolvers extends Resolvers {}
}
"
`;

exports[`subscription 2`] = `
Array [
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { UserResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const User: UserResolvers.Type = {
  ...UserResolvers.defaultResolvers
};
",
    "force": false,
    "path": "User.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { SubscriptionResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Subscription: SubscriptionResolvers.Type = {
  ...SubscriptionResolvers.defaultResolvers,
  subscribeToUser: {
    subscribe: (parent, args, ctx) => {
      throw new Error(\\"Resolver not implemented\\");
    }
  }
};
",
    "force": false,
    "path": "Subscription.ts",
  },
  Object {
    "code": "// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Subscription } from \\"./Subscription\\";
import { User } from \\"./User\\";

export const resolvers: Resolvers = {
  Subscription,
  User
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;
