// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`large schema 1`] = `
Array [
  Object {
    "code": "import { ViewerResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { UserParent } from \\"./User\\";
import { BookingParent } from \\"./Booking\\";

export interface ViewerParent {
  me: UserParent;
  bookings: BookingParent[];
}

export const Viewer: ViewerResolvers.Type<TypeMap> = {
  me: parent => parent.me,
  bookings: parent => parent.bookings
};
",
    "force": false,
    "path": "Viewer.ts",
  },
  Object {
    "code": "import { AuthPayloadResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { UserParent } from \\"./User\\";

export interface AuthPayloadParent {
  token: string;
  user: UserParent;
}

export const AuthPayload: AuthPayloadResolvers.Type<TypeMap> = {
  token: parent => parent.token,
  user: parent => parent.user
};
",
    "force": false,
    "path": "AuthPayload.ts",
  },
  Object {
    "code": "import { MutationResultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";

export interface MutationResultParent {
  success: boolean;
}

export const MutationResult: MutationResultResolvers.Type<TypeMap> = {
  success: parent => parent.success
};
",
    "force": false,
    "path": "MutationResult.ts",
  },
  Object {
    "code": "import { ExperiencesByCityResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { ExperienceParent } from \\"./Experience\\";
import { CityParent } from \\"./City\\";

export interface ExperiencesByCityParent {
  experiences: ExperienceParent[];
  city: CityParent;
}

export const ExperiencesByCity: ExperiencesByCityResolvers.Type<TypeMap> = {
  experiences: parent => parent.experiences,
  city: parent => parent.city
};
",
    "force": false,
    "path": "ExperiencesByCity.ts",
  },
  Object {
    "code": "import { HomeResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { PictureParent } from \\"./Picture\\";

export interface HomeParent {
  id: string;
  name?: string;
  description: string;
  numRatings: number;
  avgRating?: number;
  pictures: PictureParent[];
  perNight: number;
}

export const Home: HomeResolvers.Type<TypeMap> = {
  id: parent => parent.id,
  name: parent => parent.name,
  description: parent => parent.description,
  numRatings: parent => parent.numRatings,
  avgRating: parent => parent.avgRating,
  pictures: (parent, args) => parent.pictures,
  perNight: parent => parent.perNight
};
",
    "force": false,
    "path": "Home.ts",
  },
  Object {
    "code": "import { ReservationResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { PictureParent } from \\"./Picture\\";
import { LocationParent } from \\"./Location\\";

export interface ReservationParent {
  id: string;
  title: string;
  avgPricePerPerson: number;
  pictures: PictureParent[];
  location: LocationParent;
  isCurated: boolean;
  slug: string;
  popularity: number;
}

export const Reservation: ReservationResolvers.Type<TypeMap> = {
  id: parent => parent.id,
  title: parent => parent.title,
  avgPricePerPerson: parent => parent.avgPricePerPerson,
  pictures: parent => parent.pictures,
  location: parent => parent.location,
  isCurated: parent => parent.isCurated,
  slug: parent => parent.slug,
  popularity: parent => parent.popularity
};
",
    "force": false,
    "path": "Reservation.ts",
  },
  Object {
    "code": "import { ExperienceResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { ExperienceCategoryParent } from \\"./ExperienceCategory\\";
import { LocationParent } from \\"./Location\\";
import { ReviewParent } from \\"./Review\\";
import { PictureParent } from \\"./Picture\\";

export interface ExperienceParent {
  id: string;
  category?: ExperienceCategoryParent;
  title: string;
  location: LocationParent;
  pricePerPerson: number;
  reviews: ReviewParent[];
  preview: PictureParent;
  popularity: number;
}

export const Experience: ExperienceResolvers.Type<TypeMap> = {
  id: parent => parent.id,
  category: parent => parent.category,
  title: parent => parent.title,
  location: parent => parent.location,
  pricePerPerson: parent => parent.pricePerPerson,
  reviews: parent => parent.reviews,
  preview: parent => parent.preview,
  popularity: parent => parent.popularity
};
",
    "force": false,
    "path": "Experience.ts",
  },
  Object {
    "code": "import { ReviewResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { DateTimeParent } from \\"./DateTime\\";

export interface ReviewParent {
  accuracy: number;
  checkIn: number;
  cleanliness: number;
  communication: number;
  createdAt: DateTimeParent;
  id: string;
  location: number;
  stars: number;
  text: string;
  value: number;
}

export const Review: ReviewResolvers.Type<TypeMap> = {
  accuracy: parent => parent.accuracy,
  checkIn: parent => parent.checkIn,
  cleanliness: parent => parent.cleanliness,
  communication: parent => parent.communication,
  createdAt: parent => parent.createdAt,
  id: parent => parent.id,
  location: parent => parent.location,
  stars: parent => parent.stars,
  text: parent => parent.text,
  value: parent => parent.value
};
",
    "force": false,
    "path": "Review.ts",
  },
  Object {
    "code": "import { NeighbourhoodResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { PictureParent } from \\"./Picture\\";
import { CityParent } from \\"./City\\";

export interface NeighbourhoodParent {
  id: string;
  name: string;
  slug: string;
  homePreview?: PictureParent;
  city: CityParent;
  featured: boolean;
  popularity: number;
}

export const Neighbourhood: NeighbourhoodResolvers.Type<TypeMap> = {
  id: parent => parent.id,
  name: parent => parent.name,
  slug: parent => parent.slug,
  homePreview: parent => parent.homePreview,
  city: parent => parent.city,
  featured: parent => parent.featured,
  popularity: parent => parent.popularity
};
",
    "force": false,
    "path": "Neighbourhood.ts",
  },
  Object {
    "code": "import { LocationResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";

export interface LocationParent {
  id: string;
  lat: number;
  lng: number;
  address?: string;
  directions?: string;
}

export const Location: LocationResolvers.Type<TypeMap> = {
  id: parent => parent.id,
  lat: parent => parent.lat,
  lng: parent => parent.lng,
  address: parent => parent.address,
  directions: parent => parent.directions
};
",
    "force": false,
    "path": "Location.ts",
  },
  Object {
    "code": "import { PictureResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";

export interface PictureParent {
  id: string;
  url: string;
}

export const Picture: PictureResolvers.Type<TypeMap> = {
  id: parent => parent.id,
  url: parent => parent.url
};
",
    "force": false,
    "path": "Picture.ts",
  },
  Object {
    "code": "import { CityResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";

export interface CityParent {
  id: string;
  name: string;
}

export const City: CityResolvers.Type<TypeMap> = {
  id: parent => parent.id,
  name: parent => parent.name
};
",
    "force": false,
    "path": "City.ts",
  },
  Object {
    "code": "import { ExperienceCategoryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { ExperienceParent } from \\"./Experience\\";

export interface ExperienceCategoryParent {
  id: string;
  mainColor: string;
  name: string;
  experience?: ExperienceParent;
}

export const ExperienceCategory: ExperienceCategoryResolvers.Type<TypeMap> = {
  id: parent => parent.id,
  mainColor: parent => parent.mainColor,
  name: parent => parent.name,
  experience: parent => parent.experience
};
",
    "force": false,
    "path": "ExperienceCategory.ts",
  },
  Object {
    "code": "import { UserResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { BookingParent } from \\"./Booking\\";
import { DateTimeParent } from \\"./DateTime\\";
import { ExperienceParent } from \\"./Experience\\";
import { LocationParent } from \\"./Location\\";
import { NotificationParent } from \\"./Notification\\";
import { PlaceParent } from \\"./Place\\";
import { PaymentAccountParent } from \\"./PaymentAccount\\";
import { PictureParent } from \\"./Picture\\";
import { MessageParent } from \\"./Message\\";

export interface UserParent {
  bookings: BookingParent[];
  createdAt: DateTimeParent;
  email: string;
  firstName: string;
  hostingExperiences: ExperienceParent[];
  id: string;
  isSuperHost: boolean;
  lastName: string;
  location: LocationParent;
  notifications: NotificationParent[];
  ownedPlaces: PlaceParent[];
  paymentAccount: PaymentAccountParent[];
  phone: string;
  profilePicture?: PictureParent;
  receivedMessages: MessageParent[];
  responseRate?: number;
  responseTime?: number;
  sentMessages: MessageParent[];
  updatedAt: DateTimeParent;
  token: string;
}

export const User: UserResolvers.Type<TypeMap> = {
  bookings: parent => parent.bookings,
  createdAt: parent => parent.createdAt,
  email: parent => parent.email,
  firstName: parent => parent.firstName,
  hostingExperiences: parent => parent.hostingExperiences,
  id: parent => parent.id,
  isSuperHost: parent => parent.isSuperHost,
  lastName: parent => parent.lastName,
  location: parent => parent.location,
  notifications: parent => parent.notifications,
  ownedPlaces: parent => parent.ownedPlaces,
  paymentAccount: parent => parent.paymentAccount,
  phone: parent => parent.phone,
  profilePicture: parent => parent.profilePicture,
  receivedMessages: parent => parent.receivedMessages,
  responseRate: parent => parent.responseRate,
  responseTime: parent => parent.responseTime,
  sentMessages: parent => parent.sentMessages,
  updatedAt: parent => parent.updatedAt,
  token: parent => parent.token
};
",
    "force": false,
    "path": "User.ts",
  },
  Object {
    "code": "import { PaymentAccountResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { DateTimeParent } from \\"./DateTime\\";
import { PAYMENT_PROVIDERParent } from \\"./PAYMENT_PROVIDER\\";
import { UserParent } from \\"./User\\";
import { PaymentParent } from \\"./Payment\\";
import { PaypalInformationParent } from \\"./PaypalInformation\\";
import { CreditCardInformationParent } from \\"./CreditCardInformation\\";

export interface PaymentAccountParent {
  id: string;
  createdAt: DateTimeParent;
  type?: PAYMENT_PROVIDERParent;
  user: UserParent;
  payments: PaymentParent[];
  paypal?: PaypalInformationParent;
  creditcard?: CreditCardInformationParent;
}

export const PaymentAccount: PaymentAccountResolvers.Type<TypeMap> = {
  id: parent => parent.id,
  createdAt: parent => parent.createdAt,
  type: parent => parent.type,
  user: parent => parent.user,
  payments: parent => parent.payments,
  paypal: parent => parent.paypal,
  creditcard: parent => parent.creditcard
};
",
    "force": false,
    "path": "PaymentAccount.ts",
  },
  Object {
    "code": "import { PlaceResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { PLACE_SIZESParent } from \\"./PLACE_SIZES\\";
import { ReviewParent } from \\"./Review\\";
import { AmenitiesParent } from \\"./Amenities\\";
import { UserParent } from \\"./User\\";
import { PricingParent } from \\"./Pricing\\";
import { LocationParent } from \\"./Location\\";
import { PlaceViewsParent } from \\"./PlaceViews\\";
import { GuestRequirementsParent } from \\"./GuestRequirements\\";
import { PoliciesParent } from \\"./Policies\\";
import { HouseRulesParent } from \\"./HouseRules\\";
import { BookingParent } from \\"./Booking\\";
import { PictureParent } from \\"./Picture\\";

export interface PlaceParent {
  id: string;
  name?: string;
  size?: PLACE_SIZESParent;
  shortDescription: string;
  description: string;
  slug: string;
  maxGuests: number;
  numBedrooms: number;
  numBeds: number;
  numBaths: number;
  reviews: ReviewParent[];
  amenities: AmenitiesParent;
  host: UserParent;
  pricing: PricingParent;
  location: LocationParent;
  views: PlaceViewsParent;
  guestRequirements?: GuestRequirementsParent;
  policies?: PoliciesParent;
  houseRules?: HouseRulesParent;
  bookings: BookingParent[];
  pictures: PictureParent[];
  popularity: number;
}

export const Place: PlaceResolvers.Type<TypeMap> = {
  id: parent => parent.id,
  name: parent => parent.name,
  size: parent => parent.size,
  shortDescription: parent => parent.shortDescription,
  description: parent => parent.description,
  slug: parent => parent.slug,
  maxGuests: parent => parent.maxGuests,
  numBedrooms: parent => parent.numBedrooms,
  numBeds: parent => parent.numBeds,
  numBaths: parent => parent.numBaths,
  reviews: parent => parent.reviews,
  amenities: parent => parent.amenities,
  host: parent => parent.host,
  pricing: parent => parent.pricing,
  location: parent => parent.location,
  views: parent => parent.views,
  guestRequirements: parent => parent.guestRequirements,
  policies: parent => parent.policies,
  houseRules: parent => parent.houseRules,
  bookings: parent => parent.bookings,
  pictures: parent => parent.pictures,
  popularity: parent => parent.popularity
};
",
    "force": false,
    "path": "Place.ts",
  },
  Object {
    "code": "import { BookingResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { DateTimeParent } from \\"./DateTime\\";
import { UserParent } from \\"./User\\";
import { PlaceParent } from \\"./Place\\";
import { PaymentParent } from \\"./Payment\\";

export interface BookingParent {
  id: string;
  createdAt: DateTimeParent;
  bookee: UserParent;
  place: PlaceParent;
  startDate: DateTimeParent;
  endDate: DateTimeParent;
  payment: PaymentParent;
}

export const Booking: BookingResolvers.Type<TypeMap> = {
  id: parent => parent.id,
  createdAt: parent => parent.createdAt,
  bookee: parent => parent.bookee,
  place: parent => parent.place,
  startDate: parent => parent.startDate,
  endDate: parent => parent.endDate,
  payment: parent => parent.payment
};
",
    "force": false,
    "path": "Booking.ts",
  },
  Object {
    "code": "import { NotificationResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { DateTimeParent } from \\"./DateTime\\";
import { NOTIFICATION_TYPEParent } from \\"./NOTIFICATION_TYPE\\";
import { UserParent } from \\"./User\\";

export interface NotificationParent {
  createdAt: DateTimeParent;
  id: string;
  link: string;
  readDate: DateTimeParent;
  type?: NOTIFICATION_TYPEParent;
  user: UserParent;
}

export const Notification: NotificationResolvers.Type<TypeMap> = {
  createdAt: parent => parent.createdAt,
  id: parent => parent.id,
  link: parent => parent.link,
  readDate: parent => parent.readDate,
  type: parent => parent.type,
  user: parent => parent.user
};
",
    "force": false,
    "path": "Notification.ts",
  },
  Object {
    "code": "import { PaymentResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { BookingParent } from \\"./Booking\\";
import { DateTimeParent } from \\"./DateTime\\";
import { PaymentAccountParent } from \\"./PaymentAccount\\";

export interface PaymentParent {
  booking: BookingParent;
  createdAt: DateTimeParent;
  id: string;
  paymentMethod: PaymentAccountParent;
  serviceFee: number;
}

export const Payment: PaymentResolvers.Type<TypeMap> = {
  booking: parent => parent.booking,
  createdAt: parent => parent.createdAt,
  id: parent => parent.id,
  paymentMethod: parent => parent.paymentMethod,
  serviceFee: parent => parent.serviceFee
};
",
    "force": false,
    "path": "Payment.ts",
  },
  Object {
    "code": "import { PaypalInformationResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { DateTimeParent } from \\"./DateTime\\";
import { PaymentAccountParent } from \\"./PaymentAccount\\";

export interface PaypalInformationParent {
  createdAt: DateTimeParent;
  email: string;
  id: string;
  paymentAccount: PaymentAccountParent;
}

export const PaypalInformation: PaypalInformationResolvers.Type<TypeMap> = {
  createdAt: parent => parent.createdAt,
  email: parent => parent.email,
  id: parent => parent.id,
  paymentAccount: parent => parent.paymentAccount
};
",
    "force": false,
    "path": "PaypalInformation.ts",
  },
  Object {
    "code": "import { CreditCardInformationResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { DateTimeParent } from \\"./DateTime\\";
import { PaymentAccountParent } from \\"./PaymentAccount\\";

export interface CreditCardInformationParent {
  cardNumber: string;
  country: string;
  createdAt: DateTimeParent;
  expiresOnMonth: number;
  expiresOnYear: number;
  firstName: string;
  id: string;
  lastName: string;
  paymentAccount?: PaymentAccountParent;
  postalCode: string;
  securityCode: string;
}

export const CreditCardInformation: CreditCardInformationResolvers.Type<
  TypeMap
> = {
  cardNumber: parent => parent.cardNumber,
  country: parent => parent.country,
  createdAt: parent => parent.createdAt,
  expiresOnMonth: parent => parent.expiresOnMonth,
  expiresOnYear: parent => parent.expiresOnYear,
  firstName: parent => parent.firstName,
  id: parent => parent.id,
  lastName: parent => parent.lastName,
  paymentAccount: parent => parent.paymentAccount,
  postalCode: parent => parent.postalCode,
  securityCode: parent => parent.securityCode
};
",
    "force": false,
    "path": "CreditCardInformation.ts",
  },
  Object {
    "code": "import { MessageResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { DateTimeParent } from \\"./DateTime\\";

export interface MessageParent {
  createdAt: DateTimeParent;
  deliveredAt: DateTimeParent;
  id: string;
  readAt: DateTimeParent;
}

export const Message: MessageResolvers.Type<TypeMap> = {
  createdAt: parent => parent.createdAt,
  deliveredAt: parent => parent.deliveredAt,
  id: parent => parent.id,
  readAt: parent => parent.readAt
};
",
    "force": false,
    "path": "Message.ts",
  },
  Object {
    "code": "import { PricingResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { CURRENCYParent } from \\"./CURRENCY\\";

export interface PricingParent {
  averageMonthly: number;
  averageWeekly: number;
  basePrice: number;
  cleaningFee?: number;
  currency?: CURRENCYParent;
  extraGuests?: number;
  id: string;
  monthlyDiscount?: number;
  perNight: number;
  securityDeposit?: number;
  smartPricing: boolean;
  weekendPricing?: number;
  weeklyDiscount?: number;
}

export const Pricing: PricingResolvers.Type<TypeMap> = {
  averageMonthly: parent => parent.averageMonthly,
  averageWeekly: parent => parent.averageWeekly,
  basePrice: parent => parent.basePrice,
  cleaningFee: parent => parent.cleaningFee,
  currency: parent => parent.currency,
  extraGuests: parent => parent.extraGuests,
  id: parent => parent.id,
  monthlyDiscount: parent => parent.monthlyDiscount,
  perNight: parent => parent.perNight,
  securityDeposit: parent => parent.securityDeposit,
  smartPricing: parent => parent.smartPricing,
  weekendPricing: parent => parent.weekendPricing,
  weeklyDiscount: parent => parent.weeklyDiscount
};
",
    "force": false,
    "path": "Pricing.ts",
  },
  Object {
    "code": "import { PlaceViewsResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";

export interface PlaceViewsParent {
  id: string;
  lastWeek: number;
}

export const PlaceViews: PlaceViewsResolvers.Type<TypeMap> = {
  id: parent => parent.id,
  lastWeek: parent => parent.lastWeek
};
",
    "force": false,
    "path": "PlaceViews.ts",
  },
  Object {
    "code": "import { GuestRequirementsResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";

export interface GuestRequirementsParent {
  govIssuedId: boolean;
  guestTripInformation: boolean;
  id: string;
  recommendationsFromOtherHosts: boolean;
}

export const GuestRequirements: GuestRequirementsResolvers.Type<TypeMap> = {
  govIssuedId: parent => parent.govIssuedId,
  guestTripInformation: parent => parent.guestTripInformation,
  id: parent => parent.id,
  recommendationsFromOtherHosts: parent => parent.recommendationsFromOtherHosts
};
",
    "force": false,
    "path": "GuestRequirements.ts",
  },
  Object {
    "code": "import { PoliciesResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { DateTimeParent } from \\"./DateTime\\";

export interface PoliciesParent {
  checkInEndTime: number;
  checkInStartTime: number;
  checkoutTime: number;
  createdAt: DateTimeParent;
  id: string;
  updatedAt: DateTimeParent;
}

export const Policies: PoliciesResolvers.Type<TypeMap> = {
  checkInEndTime: parent => parent.checkInEndTime,
  checkInStartTime: parent => parent.checkInStartTime,
  checkoutTime: parent => parent.checkoutTime,
  createdAt: parent => parent.createdAt,
  id: parent => parent.id,
  updatedAt: parent => parent.updatedAt
};
",
    "force": false,
    "path": "Policies.ts",
  },
  Object {
    "code": "import { HouseRulesResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";
import { DateTimeParent } from \\"./DateTime\\";

export interface HouseRulesParent {
  additionalRules?: string;
  createdAt: DateTimeParent;
  id: string;
  partiesAndEventsAllowed?: boolean;
  petsAllowed?: boolean;
  smokingAllowed?: boolean;
  suitableForChildren?: boolean;
  suitableForInfants?: boolean;
  updatedAt: DateTimeParent;
}

export const HouseRules: HouseRulesResolvers.Type<TypeMap> = {
  additionalRules: parent => parent.additionalRules,
  createdAt: parent => parent.createdAt,
  id: parent => parent.id,
  partiesAndEventsAllowed: parent => parent.partiesAndEventsAllowed,
  petsAllowed: parent => parent.petsAllowed,
  smokingAllowed: parent => parent.smokingAllowed,
  suitableForChildren: parent => parent.suitableForChildren,
  suitableForInfants: parent => parent.suitableForInfants,
  updatedAt: parent => parent.updatedAt
};
",
    "force": false,
    "path": "HouseRules.ts",
  },
  Object {
    "code": "import { AmenitiesResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";

export interface AmenitiesParent {
  airConditioning: boolean;
  babyBath: boolean;
  babyMonitor: boolean;
  babysitterRecommendations: boolean;
  bathtub: boolean;
  breakfast: boolean;
  buzzerWirelessIntercom: boolean;
  cableTv: boolean;
  changingTable: boolean;
  childrensBooksAndToys: boolean;
  childrensDinnerware: boolean;
  crib: boolean;
  doorman: boolean;
  dryer: boolean;
  elevator: boolean;
  essentials: boolean;
  familyKidFriendly: boolean;
  freeParkingOnPremises: boolean;
  freeParkingOnStreet: boolean;
  gym: boolean;
  hairDryer: boolean;
  hangers: boolean;
  heating: boolean;
  hotTub: boolean;
  id: string;
  indoorFireplace: boolean;
  internet: boolean;
  iron: boolean;
  kitchen: boolean;
  laptopFriendlyWorkspace: boolean;
  paidParkingOffPremises: boolean;
  petsAllowed: boolean;
  pool: boolean;
  privateEntrance: boolean;
  shampoo: boolean;
  smokingAllowed: boolean;
  suitableForEvents: boolean;
  tv: boolean;
  washer: boolean;
  wheelchairAccessible: boolean;
  wirelessInternet: boolean;
}

export const Amenities: AmenitiesResolvers.Type<TypeMap> = {
  airConditioning: parent => parent.airConditioning,
  babyBath: parent => parent.babyBath,
  babyMonitor: parent => parent.babyMonitor,
  babysitterRecommendations: parent => parent.babysitterRecommendations,
  bathtub: parent => parent.bathtub,
  breakfast: parent => parent.breakfast,
  buzzerWirelessIntercom: parent => parent.buzzerWirelessIntercom,
  cableTv: parent => parent.cableTv,
  changingTable: parent => parent.changingTable,
  childrensBooksAndToys: parent => parent.childrensBooksAndToys,
  childrensDinnerware: parent => parent.childrensDinnerware,
  crib: parent => parent.crib,
  doorman: parent => parent.doorman,
  dryer: parent => parent.dryer,
  elevator: parent => parent.elevator,
  essentials: parent => parent.essentials,
  familyKidFriendly: parent => parent.familyKidFriendly,
  freeParkingOnPremises: parent => parent.freeParkingOnPremises,
  freeParkingOnStreet: parent => parent.freeParkingOnStreet,
  gym: parent => parent.gym,
  hairDryer: parent => parent.hairDryer,
  hangers: parent => parent.hangers,
  heating: parent => parent.heating,
  hotTub: parent => parent.hotTub,
  id: parent => parent.id,
  indoorFireplace: parent => parent.indoorFireplace,
  internet: parent => parent.internet,
  iron: parent => parent.iron,
  kitchen: parent => parent.kitchen,
  laptopFriendlyWorkspace: parent => parent.laptopFriendlyWorkspace,
  paidParkingOffPremises: parent => parent.paidParkingOffPremises,
  petsAllowed: parent => parent.petsAllowed,
  pool: parent => parent.pool,
  privateEntrance: parent => parent.privateEntrance,
  shampoo: parent => parent.shampoo,
  smokingAllowed: parent => parent.smokingAllowed,
  suitableForEvents: parent => parent.suitableForEvents,
  tv: parent => parent.tv,
  washer: parent => parent.washer,
  wheelchairAccessible: parent => parent.wheelchairAccessible,
  wirelessInternet: parent => parent.wirelessInternet
};
",
    "force": false,
    "path": "Amenities.ts",
  },
  Object {
    "code": "import { QueryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";

export interface QueryParent {}

export const Query: QueryResolvers.Type<TypeMap> = {
  topExperiences: parent => {
    throw new Error(\\"Resolver not implemented\\");
  },
  topHomes: parent => {
    throw new Error(\\"Resolver not implemented\\");
  },
  homesInPriceRange: (parent, args) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  topReservations: parent => {
    throw new Error(\\"Resolver not implemented\\");
  },
  featuredDestinations: parent => {
    throw new Error(\\"Resolver not implemented\\");
  },
  experiencesByCity: (parent, args) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  viewer: parent => null,
  myLocation: parent => null
};
",
    "force": false,
    "path": "Query.ts",
  },
  Object {
    "code": "import { MutationResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";

export interface MutationParent {}

export const Mutation: MutationResolvers.Type<TypeMap> = {
  signup: (parent, args) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  login: (parent, args) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  addPaymentMethod: (parent, args) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  book: (parent, args) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Mutation.ts",
  },
  Object {
    "code": "export interface Context {}
",
    "force": false,
    "path": "types/Context.ts",
  },
  Object {
    "code": "import { ITypeMap } from \\"../[TEMPLATE-INTERFACES-PATH]\\";

import { QueryParent } from \\"../Query\\";
import { MutationParent } from \\"../Mutation\\";
import { ViewerParent } from \\"../Viewer\\";
import { AuthPayloadParent } from \\"../AuthPayload\\";
import { MutationResultParent } from \\"../MutationResult\\";
import { ExperiencesByCityParent } from \\"../ExperiencesByCity\\";
import { HomeParent } from \\"../Home\\";
import { ReservationParent } from \\"../Reservation\\";
import { ExperienceParent } from \\"../Experience\\";
import { ReviewParent } from \\"../Review\\";
import { NeighbourhoodParent } from \\"../Neighbourhood\\";
import { LocationParent } from \\"../Location\\";
import { PictureParent } from \\"../Picture\\";
import { CityParent } from \\"../City\\";
import { ExperienceCategoryParent } from \\"../ExperienceCategory\\";
import { UserParent } from \\"../User\\";
import { PaymentAccountParent } from \\"../PaymentAccount\\";
import { PlaceParent } from \\"../Place\\";
import { BookingParent } from \\"../Booking\\";
import { NotificationParent } from \\"../Notification\\";
import { PaymentParent } from \\"../Payment\\";
import { PaypalInformationParent } from \\"../PaypalInformation\\";
import { CreditCardInformationParent } from \\"../CreditCardInformation\\";
import { MessageParent } from \\"../Message\\";
import { PricingParent } from \\"../Pricing\\";
import { PlaceViewsParent } from \\"../PlaceViews\\";
import { GuestRequirementsParent } from \\"../GuestRequirements\\";
import { PoliciesParent } from \\"../Policies\\";
import { HouseRulesParent } from \\"../HouseRules\\";
import { AmenitiesParent } from \\"../Amenities\\";

import { Context } from \\"./Context\\";

export interface TypeMap extends ITypeMap {
  Context: Context;
  QueryParent: QueryParent;
  MutationParent: MutationParent;
  ViewerParent: ViewerParent;
  AuthPayloadParent: AuthPayloadParent;
  MutationResultParent: MutationResultParent;
  ExperiencesByCityParent: ExperiencesByCityParent;
  HomeParent: HomeParent;
  ReservationParent: ReservationParent;
  ExperienceParent: ExperienceParent;
  ReviewParent: ReviewParent;
  NeighbourhoodParent: NeighbourhoodParent;
  LocationParent: LocationParent;
  PictureParent: PictureParent;
  CityParent: CityParent;
  ExperienceCategoryParent: ExperienceCategoryParent;
  UserParent: UserParent;
  PaymentAccountParent: PaymentAccountParent;
  PlaceParent: PlaceParent;
  BookingParent: BookingParent;
  NotificationParent: NotificationParent;
  PaymentParent: PaymentParent;
  PaypalInformationParent: PaypalInformationParent;
  CreditCardInformationParent: CreditCardInformationParent;
  MessageParent: MessageParent;
  PricingParent: PricingParent;
  PlaceViewsParent: PlaceViewsParent;
  GuestRequirementsParent: GuestRequirementsParent;
  PoliciesParent: PoliciesParent;
  HouseRulesParent: HouseRulesParent;
  AmenitiesParent: AmenitiesParent;
}
",
    "force": true,
    "path": "types/TypeMap.ts",
  },
  Object {
    "code": "import { IResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { TypeMap } from \\"./types/TypeMap\\";

import { Query } from \\"./Query\\";
import { Mutation } from \\"./Mutation\\";
import { Viewer } from \\"./Viewer\\";
import { AuthPayload } from \\"./AuthPayload\\";
import { MutationResult } from \\"./MutationResult\\";
import { ExperiencesByCity } from \\"./ExperiencesByCity\\";
import { Home } from \\"./Home\\";
import { Reservation } from \\"./Reservation\\";
import { Experience } from \\"./Experience\\";
import { Review } from \\"./Review\\";
import { Neighbourhood } from \\"./Neighbourhood\\";
import { Location } from \\"./Location\\";
import { Picture } from \\"./Picture\\";
import { City } from \\"./City\\";
import { ExperienceCategory } from \\"./ExperienceCategory\\";
import { User } from \\"./User\\";
import { PaymentAccount } from \\"./PaymentAccount\\";
import { Place } from \\"./Place\\";
import { Booking } from \\"./Booking\\";
import { Notification } from \\"./Notification\\";
import { Payment } from \\"./Payment\\";
import { PaypalInformation } from \\"./PaypalInformation\\";
import { CreditCardInformation } from \\"./CreditCardInformation\\";
import { Message } from \\"./Message\\";
import { Pricing } from \\"./Pricing\\";
import { PlaceViews } from \\"./PlaceViews\\";
import { GuestRequirements } from \\"./GuestRequirements\\";
import { Policies } from \\"./Policies\\";
import { HouseRules } from \\"./HouseRules\\";
import { Amenities } from \\"./Amenities\\";

export const resolvers: IResolvers<TypeMap> = {
  Query,
  Mutation,
  Viewer,
  AuthPayload,
  MutationResult,
  ExperiencesByCity,
  Home,
  Reservation,
  Experience,
  Review,
  Neighbourhood,
  Location,
  Picture,
  City,
  ExperienceCategory,
  User,
  PaymentAccount,
  Place,
  Booking,
  Notification,
  Payment,
  PaypalInformation,
  CreditCardInformation,
  Message,
  Pricing,
  PlaceViews,
  GuestRequirements,
  Policies,
  HouseRules,
  Amenities
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;
