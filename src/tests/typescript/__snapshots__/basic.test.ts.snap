// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic enum 1`] = `
"/* DO NOT EDIT! */
import { GraphQLResolveInfo } from \\"graphql\\";

export interface ITypeMap {
  Context: any;
  UserType: any;

  UserParent: any;
  QueryParent: any;
}

export namespace UserResolvers {
  export type IdResolver<T extends ITypeMap> = (
    parent: T[\\"UserParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver<T extends ITypeMap> = (
    parent: T[\\"UserParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TypeResolver<T extends ITypeMap> = (
    parent: T[\\"UserParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"UserType\\"] | Promise<T[\\"UserType\\"]>;

  export interface Type<T extends ITypeMap> {
    id: (
      parent: T[\\"UserParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    name: (
      parent: T[\\"UserParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    type: (
      parent: T[\\"UserParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"UserType\\"] | Promise<T[\\"UserType\\"]>;
  }
}

export namespace QueryResolvers {
  export interface ArgsCreateUser<T extends ITypeMap> {
    name: string;
    type: T[\\"UserType\\"];
  }

  export type CreateUserResolver<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: ArgsCreateUser<T>,
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"UserParent\\"] | null | Promise<T[\\"UserParent\\"] | null>;

  export interface Type<T extends ITypeMap> {
    createUser: (
      parent: T[\\"QueryParent\\"],
      args: ArgsCreateUser<T>,
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"UserParent\\"] | null | Promise<T[\\"UserParent\\"] | null>;
  }
}

export interface IResolvers<T extends ITypeMap> {
  User: UserResolvers.Type<T>;
  Query: QueryResolvers.Type<T>;
}
"
`;

exports[`basic input 1`] = `
"/* DO NOT EDIT! */
import { GraphQLResolveInfo } from \\"graphql\\";

export interface ITypeMap {
  Context: any;

  AddMemberPayloadParent: any;
  MutationParent: any;
}

export namespace AddMemberPayloadResolvers {
  export type NewUserIdResolver<T extends ITypeMap> = (
    parent: T[\\"AddMemberPayloadParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ExistingUserInviteSentResolver<T extends ITypeMap> = (
    parent: T[\\"AddMemberPayloadParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export interface Type<T extends ITypeMap> {
    newUserId: (
      parent: T[\\"AddMemberPayloadParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
    existingUserInviteSent: (
      parent: T[\\"AddMemberPayloadParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;
  }
}

export namespace MutationResolvers {
  export interface AddMemberData {
    email: string;
    projects: string;
  }

  export interface ArgsAddMember<T extends ITypeMap> {
    data: AddMemberData;
  }

  export type AddMemberResolver<T extends ITypeMap> = (
    parent: T[\\"MutationParent\\"],
    args: ArgsAddMember<T>,
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"AddMemberPayloadParent\\"] | Promise<T[\\"AddMemberPayloadParent\\"]>;

  export interface Type<T extends ITypeMap> {
    addMember: (
      parent: T[\\"MutationParent\\"],
      args: ArgsAddMember<T>,
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"AddMemberPayloadParent\\"] | Promise<T[\\"AddMemberPayloadParent\\"]>;
  }
}

export interface IResolvers<T extends ITypeMap> {
  AddMemberPayload: AddMemberPayloadResolvers.Type<T>;
  Mutation: MutationResolvers.Type<T>;
}
"
`;

exports[`basic interface 1`] = `
"/* DO NOT EDIT! */
import { GraphQLResolveInfo } from \\"graphql\\";

export interface ITypeMap {
  Context: any;

  VideoParent: any;
  PictureParent: any;
  HomeParent: any;
}

export namespace MediaResolvers {
  export type IdResolver<T extends ITypeMap> = (
    parent: T[\\"VideoParent\\"] | T[\\"PictureParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UrlResolver<T extends ITypeMap> = (
    parent: T[\\"VideoParent\\"] | T[\\"PictureParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type<T extends ITypeMap> {
    id: (
      parent: T[\\"VideoParent\\"] | T[\\"PictureParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    url: (
      parent: T[\\"VideoParent\\"] | T[\\"PictureParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace VideoResolvers {
  export type IdResolver<T extends ITypeMap> = (
    parent: T[\\"VideoParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver<T extends ITypeMap> = (
    parent: T[\\"VideoParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DurationResolver<T extends ITypeMap> = (
    parent: T[\\"VideoParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type<T extends ITypeMap> extends MediaResolvers.Type<T> {
    id: (
      parent: T[\\"VideoParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    name: (
      parent: T[\\"VideoParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    duration: (
      parent: T[\\"VideoParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace PictureResolvers {
  export type IdResolver<T extends ITypeMap> = (
    parent: T[\\"PictureParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UrlResolver<T extends ITypeMap> = (
    parent: T[\\"PictureParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type WidthResolver<T extends ITypeMap> = (
    parent: T[\\"PictureParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type HeightResolver<T extends ITypeMap> = (
    parent: T[\\"PictureParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type<T extends ITypeMap> extends MediaResolvers.Type<T> {
    id: (
      parent: T[\\"PictureParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    url: (
      parent: T[\\"PictureParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    width: (
      parent: T[\\"PictureParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    height: (
      parent: T[\\"PictureParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace HomeResolvers {
  export type IdResolver<T extends ITypeMap> = (
    parent: T[\\"HomeParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver<T extends ITypeMap> = (
    parent: T[\\"HomeParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type DescriptionResolver<T extends ITypeMap> = (
    parent: T[\\"HomeParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NumRatingsResolver<T extends ITypeMap> = (
    parent: T[\\"HomeParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type AvgRatingResolver<T extends ITypeMap> = (
    parent: T[\\"HomeParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface ArgsMedia<T extends ITypeMap> {
    first: number | null;
  }

  export type MediaResolver<T extends ITypeMap> = (
    parent: T[\\"HomeParent\\"],
    args: ArgsMedia<T>,
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) =>
    | Array<T[\\"VideoParent\\"] | T[\\"PictureParent\\"]>
    | Promise<Array<T[\\"VideoParent\\"] | T[\\"PictureParent\\"]>>;

  export type PerNightResolver<T extends ITypeMap> = (
    parent: T[\\"HomeParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type<T extends ITypeMap> {
    id: (
      parent: T[\\"HomeParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    name: (
      parent: T[\\"HomeParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
    description: (
      parent: T[\\"HomeParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    numRatings: (
      parent: T[\\"HomeParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
    avgRating: (
      parent: T[\\"HomeParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
    media: (
      parent: T[\\"HomeParent\\"],
      args: ArgsMedia<T>,
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) =>
      | Array<T[\\"VideoParent\\"] | T[\\"PictureParent\\"]>
      | Promise<Array<T[\\"VideoParent\\"] | T[\\"PictureParent\\"]>>;
    perNight: (
      parent: T[\\"HomeParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export interface IResolvers<T extends ITypeMap> {
  Video: VideoResolvers.Type<T>;
  Picture: PictureResolvers.Type<T>;
  Home: HomeResolvers.Type<T>;
}
"
`;

exports[`basic scalar 1`] = `
"/* DO NOT EDIT! */
import { GraphQLResolveInfo } from \\"graphql\\";

export interface ITypeMap {
  Context: any;

  AddMemberPayloadParent: any;
  MutationParent: any;
}

export namespace AddMemberPayloadResolvers {
  export type JsonResolver<T extends ITypeMap> = (
    parent: T[\\"AddMemberPayloadParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type<T extends ITypeMap> {
    json: (
      parent: T[\\"AddMemberPayloadParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace MutationResolvers {
  export interface AddMemberData {
    email: string;
    projects: string;
  }

  export interface ArgsAddMember<T extends ITypeMap> {
    data: AddMemberData;
  }

  export type AddMemberResolver<T extends ITypeMap> = (
    parent: T[\\"MutationParent\\"],
    args: ArgsAddMember<T>,
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"AddMemberPayloadParent\\"] | Promise<T[\\"AddMemberPayloadParent\\"]>;

  export interface Type<T extends ITypeMap> {
    addMember: (
      parent: T[\\"MutationParent\\"],
      args: ArgsAddMember<T>,
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"AddMemberPayloadParent\\"] | Promise<T[\\"AddMemberPayloadParent\\"]>;
  }
}

export interface IResolvers<T extends ITypeMap> {
  AddMemberPayload: AddMemberPayloadResolvers.Type<T>;
  Mutation: MutationResolvers.Type<T>;
}
"
`;

exports[`basic schema 1`] = `
"/* DO NOT EDIT! */
import { GraphQLResolveInfo } from \\"graphql\\";

export interface ITypeMap {
  Context: any;

  QueryParent: any;
  NumberParent: any;
}

export namespace QueryResolvers {
  export type IdResolver<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type Custom_requiredResolver<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"NumberParent\\"] | Promise<T[\\"NumberParent\\"]>;

  export type Custom_nullableResolver<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"NumberParent\\"] | null | Promise<T[\\"NumberParent\\"] | null>;

  export type Custom_array_nullableResolver<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"NumberParent\\"][] | null | Promise<T[\\"NumberParent\\"][] | null>;

  export type Custom_array_requiredResolver<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"NumberParent\\"][] | Promise<T[\\"NumberParent\\"][]>;

  export interface ArgsCustom_with_arg<T extends ITypeMap> {
    id: number;
  }

  export type Custom_with_argResolver<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: ArgsCustom_with_arg<T>,
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"NumberParent\\"] | Promise<T[\\"NumberParent\\"]>;

  export interface ArgsCustom_with_custom_arg<T extends ITypeMap> {
    id: T[\\"NumberParent\\"];
  }

  export type Custom_with_custom_argResolver<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: ArgsCustom_with_custom_arg<T>,
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"NumberParent\\"] | Promise<T[\\"NumberParent\\"]>;

  export type Scalar_requiredResolver<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type Scalar_nullableResolver<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type Scalar_array_nullableResolver<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => boolean[] | null | Promise<boolean[] | null>;

  export type Scalar_array_requiredResolver<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => boolean[] | Promise<boolean[]>;

  export interface ArgsScalar_with_arg<T extends ITypeMap> {
    id: number;
  }

  export type Scalar_with_argResolver<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: ArgsScalar_with_arg<T>,
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface ArgsScalar_with_custom_arg<T extends ITypeMap> {
    id: T[\\"NumberParent\\"];
  }

  export type Scalar_with_custom_argResolver<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: ArgsScalar_with_custom_arg<T>,
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type<T extends ITypeMap> {
    id: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    custom_required: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"NumberParent\\"] | Promise<T[\\"NumberParent\\"]>;
    custom_nullable: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"NumberParent\\"] | null | Promise<T[\\"NumberParent\\"] | null>;
    custom_array_nullable: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"NumberParent\\"][] | null | Promise<T[\\"NumberParent\\"][] | null>;
    custom_array_required: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"NumberParent\\"][] | Promise<T[\\"NumberParent\\"][]>;
    custom_with_arg: (
      parent: T[\\"QueryParent\\"],
      args: ArgsCustom_with_arg<T>,
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"NumberParent\\"] | Promise<T[\\"NumberParent\\"]>;
    custom_with_custom_arg: (
      parent: T[\\"QueryParent\\"],
      args: ArgsCustom_with_custom_arg<T>,
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"NumberParent\\"] | Promise<T[\\"NumberParent\\"]>;
    scalar_required: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    scalar_nullable: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;
    scalar_array_nullable: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => boolean[] | null | Promise<boolean[] | null>;
    scalar_array_required: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => boolean[] | Promise<boolean[]>;
    scalar_with_arg: (
      parent: T[\\"QueryParent\\"],
      args: ArgsScalar_with_arg<T>,
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
    scalar_with_custom_arg: (
      parent: T[\\"QueryParent\\"],
      args: ArgsScalar_with_custom_arg<T>,
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
  }
}

export namespace NumberResolvers {
  export type IdResolver<T extends ITypeMap> = (
    parent: T[\\"NumberParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ValueResolver<T extends ITypeMap> = (
    parent: T[\\"NumberParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type<T extends ITypeMap> {
    id: (
      parent: T[\\"NumberParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
    value: (
      parent: T[\\"NumberParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export interface IResolvers<T extends ITypeMap> {
  Query: QueryResolvers.Type<T>;
  Number: NumberResolvers.Type<T>;
}
"
`;

exports[`basic union 1`] = `
"/* DO NOT EDIT! */
import { GraphQLResolveInfo } from \\"graphql\\";

export interface ITypeMap {
  Context: any;

  UserType: any;
  UserParent: any;
  StudentParent: any;
  ProfessorParent: any;
}

export namespace UserResolvers {
  export type IdResolver<T extends ITypeMap> = (
    parent: T[\\"UserParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver<T extends ITypeMap> = (
    parent: T[\\"UserParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TypeResolver<T extends ITypeMap> = (
    parent: T[\\"UserParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"UserType\\"] | Promise<T[\\"UserType\\"]>;

  export interface Type<T extends ITypeMap> {
    id: (
      parent: T[\\"UserParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    name: (
      parent: T[\\"UserParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
    type: (
      parent: T[\\"UserParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"UserType\\"] | Promise<T[\\"UserType\\"]>;
  }
}

export namespace StudentResolvers {
  export type AgeResolver<T extends ITypeMap> = (
    parent: T[\\"StudentParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type<T extends ITypeMap> {
    age: (
      parent: T[\\"StudentParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace ProfessorResolvers {
  export type DegreeResolver<T extends ITypeMap> = (
    parent: T[\\"ProfessorParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type<T extends ITypeMap> {
    degree: (
      parent: T[\\"ProfessorParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export interface IResolvers<T extends ITypeMap> {
  User: UserResolvers.Type<T>;
  Student: StudentResolvers.Type<T>;
  Professor: ProfessorResolvers.Type<T>;
}
"
`;
